<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="694" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="677.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="677.00"> </text><svg id="frames" x="10" width="1180" total_samples="1095"><g><title>[libc.so.6] (2 samples, 0.18%)</title><rect x="0.0000%" y="597" width="0.1826%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.18%)</title><rect x="0.1826%" y="597" width="0.1826%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="2"/><text x="0.4326%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.09%)</title><rect x="0.2740%" y="581" width="0.0913%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="0.5240%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.09%)</title><rect x="0.2740%" y="565" width="0.0913%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="0.5240%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.09%)</title><rect x="0.2740%" y="549" width="0.0913%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="1"/><text x="0.5240%" y="559.50"></text></g><g><title>chess::make_move::aux (1 samples, 0.09%)</title><rect x="0.3653%" y="597" width="0.0913%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="1"/><text x="0.6153%" y="607.50"></text></g><g><title>chess::move_gen::discover_check (1 samples, 0.09%)</title><rect x="0.4566%" y="597" width="0.0913%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="1"/><text x="0.7066%" y="607.50"></text></g><g><title>[[heap]] (7 samples, 0.64%)</title><rect x="0.0000%" y="613" width="0.6393%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="7"/><text x="0.2500%" y="623.50"></text></g><g><title>chess::unmake::unmake_move (1 samples, 0.09%)</title><rect x="0.5479%" y="597" width="0.0913%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="1"/><text x="0.7979%" y="607.50"></text></g><g><title>chess::make_move::aux (4 samples, 0.37%)</title><rect x="1.3699%" y="581" width="0.3653%" height="15" fill="rgb(220,122,19)" fg:x="15" fg:w="4"/><text x="1.6199%" y="591.50"></text></g><g><title>chess::make_move::aux (13 samples, 1.19%)</title><rect x="0.6393%" y="597" width="1.1872%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="13"/><text x="0.8893%" y="607.50"></text></g><g><title>chess::make_move::update_game_state (1 samples, 0.09%)</title><rect x="1.7352%" y="581" width="0.0913%" height="15" fill="rgb(240,193,28)" fg:x="19" fg:w="1"/><text x="1.9852%" y="591.50"></text></g><g><title>chess::perft::perft (9 samples, 0.82%)</title><rect x="1.8265%" y="597" width="0.8219%" height="15" fill="rgb(216,20,37)" fg:x="20" fg:w="9"/><text x="2.0765%" y="607.50"></text></g><g><title>[[stack]] (24 samples, 2.19%)</title><rect x="0.6393%" y="613" width="2.1918%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="24"/><text x="0.8893%" y="623.50">[..</text></g><g><title>realloc (2 samples, 0.18%)</title><rect x="2.6484%" y="597" width="0.1826%" height="15" fill="rgb(217,207,13)" fg:x="29" fg:w="2"/><text x="2.8984%" y="607.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.64%)</title><rect x="2.8311%" y="613" width="0.6393%" height="15" fill="rgb(231,73,38)" fg:x="31" fg:w="7"/><text x="3.0811%" y="623.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.18%)</title><rect x="3.2877%" y="597" width="0.1826%" height="15" fill="rgb(225,20,46)" fg:x="36" fg:w="2"/><text x="3.5377%" y="607.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.18%)</title><rect x="3.2877%" y="581" width="0.1826%" height="15" fill="rgb(210,31,41)" fg:x="36" fg:w="2"/><text x="3.5377%" y="591.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.18%)</title><rect x="3.2877%" y="565" width="0.1826%" height="15" fill="rgb(221,200,47)" fg:x="36" fg:w="2"/><text x="3.5377%" y="575.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.09%)</title><rect x="3.3790%" y="549" width="0.0913%" height="15" fill="rgb(226,26,5)" fg:x="37" fg:w="1"/><text x="3.6290%" y="559.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.09%)</title><rect x="3.3790%" y="533" width="0.0913%" height="15" fill="rgb(249,33,26)" fg:x="37" fg:w="1"/><text x="3.6290%" y="543.50"></text></g><g><title>[libc.so.6] (8 samples, 0.73%)</title><rect x="3.4703%" y="597" width="0.7306%" height="15" fill="rgb(235,183,28)" fg:x="38" fg:w="8"/><text x="3.7203%" y="607.50"></text></g><g><title>chess::unmake::unmake_move (5 samples, 0.46%)</title><rect x="3.7443%" y="581" width="0.4566%" height="15" fill="rgb(221,5,38)" fg:x="41" fg:w="5"/><text x="3.9943%" y="591.50"></text></g><g><title>chess::unmake::unmake_move (1 samples, 0.09%)</title><rect x="4.1096%" y="565" width="0.0913%" height="15" fill="rgb(247,18,42)" fg:x="45" fg:w="1"/><text x="4.3596%" y="575.50"></text></g><g><title>__rdl_alloc (1 samples, 0.09%)</title><rect x="4.2009%" y="597" width="0.0913%" height="15" fill="rgb(241,131,45)" fg:x="46" fg:w="1"/><text x="4.4509%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.18%)</title><rect x="4.2922%" y="597" width="0.1826%" height="15" fill="rgb(249,31,29)" fg:x="47" fg:w="2"/><text x="4.5422%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.18%)</title><rect x="4.2922%" y="581" width="0.1826%" height="15" fill="rgb(225,111,53)" fg:x="47" fg:w="2"/><text x="4.5422%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.09%)</title><rect x="4.3836%" y="565" width="0.0913%" height="15" fill="rgb(238,160,17)" fg:x="48" fg:w="1"/><text x="4.6336%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.09%)</title><rect x="4.3836%" y="549" width="0.0913%" height="15" fill="rgb(214,148,48)" fg:x="48" fg:w="1"/><text x="4.6336%" y="559.50"></text></g><g><title>chess::make_move::make_move (1 samples, 0.09%)</title><rect x="4.4749%" y="597" width="0.0913%" height="15" fill="rgb(232,36,49)" fg:x="49" fg:w="1"/><text x="4.7249%" y="607.50"></text></g><g><title>chess::move_gen::pawn_moves (2 samples, 0.18%)</title><rect x="4.5662%" y="597" width="0.1826%" height="15" fill="rgb(209,103,24)" fg:x="50" fg:w="2"/><text x="4.8162%" y="607.50"></text></g><g><title>chess::piece::PieceList::make_move (2 samples, 0.18%)</title><rect x="4.7489%" y="597" width="0.1826%" height="15" fill="rgb(229,88,8)" fg:x="52" fg:w="2"/><text x="4.9989%" y="607.50"></text></g><g><title>[unknown] (19 samples, 1.74%)</title><rect x="3.4703%" y="613" width="1.7352%" height="15" fill="rgb(213,181,19)" fg:x="38" fg:w="19"/><text x="3.7203%" y="623.50"></text></g><g><title>chess::unmake::unmake_move (3 samples, 0.27%)</title><rect x="4.9315%" y="597" width="0.2740%" height="15" fill="rgb(254,191,54)" fg:x="54" fg:w="3"/><text x="5.1815%" y="607.50"></text></g><g><title>__rdl_realloc (1 samples, 0.09%)</title><rect x="5.2055%" y="613" width="0.0913%" height="15" fill="rgb(241,83,37)" fg:x="57" fg:w="1"/><text x="5.4555%" y="623.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.09%)</title><rect x="5.2055%" y="597" width="0.0913%" height="15" fill="rgb(233,36,39)" fg:x="57" fg:w="1"/><text x="5.4555%" y="607.50"></text></g><g><title>chess::fen_reader::read_fen (32 samples, 2.92%)</title><rect x="5.2968%" y="341" width="2.9224%" height="15" fill="rgb(226,3,54)" fg:x="58" fg:w="32"/><text x="5.5468%" y="351.50">ch..</text></g><g><title>alloc::vec::from_elem (32 samples, 2.92%)</title><rect x="5.2968%" y="325" width="2.9224%" height="15" fill="rgb(245,192,40)" fg:x="58" fg:w="32"/><text x="5.5468%" y="335.50">al..</text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (32 samples, 2.92%)</title><rect x="5.2968%" y="309" width="2.9224%" height="15" fill="rgb(238,167,29)" fg:x="58" fg:w="32"/><text x="5.5468%" y="319.50">&lt;T..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (32 samples, 2.92%)</title><rect x="5.2968%" y="293" width="2.9224%" height="15" fill="rgb(232,182,51)" fg:x="58" fg:w="32"/><text x="5.5468%" y="303.50">al..</text></g><g><title>core::ptr::write (32 samples, 2.92%)</title><rect x="5.2968%" y="277" width="2.9224%" height="15" fill="rgb(231,60,39)" fg:x="58" fg:w="32"/><text x="5.5468%" y="287.50">co..</text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="8.2192%" y="293" width="0.0913%" height="15" fill="rgb(208,69,12)" fg:x="90" fg:w="1"/><text x="8.4692%" y="303.50"></text></g><g><title>chess::make_move::make_move (2 samples, 0.18%)</title><rect x="8.3105%" y="293" width="0.1826%" height="15" fill="rgb(235,93,37)" fg:x="91" fg:w="2"/><text x="8.5605%" y="303.50"></text></g><g><title>chess::make_move::aux (2 samples, 0.18%)</title><rect x="8.3105%" y="277" width="0.1826%" height="15" fill="rgb(213,116,39)" fg:x="91" fg:w="2"/><text x="8.5605%" y="287.50"></text></g><g><title>chess::make_move::update_game_state (1 samples, 0.09%)</title><rect x="8.4018%" y="261" width="0.0913%" height="15" fill="rgb(222,207,29)" fg:x="92" fg:w="1"/><text x="8.6518%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="8.4018%" y="245" width="0.0913%" height="15" fill="rgb(206,96,30)" fg:x="92" fg:w="1"/><text x="8.6518%" y="255.50"></text></g><g><title>chess::move_gen::move_gen (1 samples, 0.09%)</title><rect x="8.4932%" y="293" width="0.0913%" height="15" fill="rgb(218,138,4)" fg:x="93" fg:w="1"/><text x="8.7432%" y="303.50"></text></g><g><title>chess::move_gen::pawn_moves (1 samples, 0.09%)</title><rect x="8.4932%" y="277" width="0.0913%" height="15" fill="rgb(250,191,14)" fg:x="93" fg:w="1"/><text x="8.7432%" y="287.50"></text></g><g><title>chess::move_gen::discover_check (1 samples, 0.09%)</title><rect x="8.4932%" y="261" width="0.0913%" height="15" fill="rgb(239,60,40)" fg:x="93" fg:w="1"/><text x="8.7432%" y="271.50"></text></g><g><title>chess::attack_gen::direction_sliding (1 samples, 0.09%)</title><rect x="8.4932%" y="245" width="0.0913%" height="15" fill="rgb(206,27,48)" fg:x="93" fg:w="1"/><text x="8.7432%" y="255.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.09%)</title><rect x="8.4932%" y="229" width="0.0913%" height="15" fill="rgb(225,35,8)" fg:x="93" fg:w="1"/><text x="8.7432%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.09%)</title><rect x="8.4932%" y="213" width="0.0913%" height="15" fill="rgb(250,213,24)" fg:x="93" fg:w="1"/><text x="8.7432%" y="223.50"></text></g><g><title>chess::move_gen::discover_check (1 samples, 0.09%)</title><rect x="8.4932%" y="197" width="0.0913%" height="15" fill="rgb(247,123,22)" fg:x="93" fg:w="1"/><text x="8.7432%" y="207.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.18%)</title><rect x="8.5845%" y="277" width="0.1826%" height="15" fill="rgb(231,138,38)" fg:x="94" fg:w="2"/><text x="8.8345%" y="287.50"></text></g><g><title>[libc.so.6] (10 samples, 0.91%)</title><rect x="8.7671%" y="277" width="0.9132%" height="15" fill="rgb(231,145,46)" fg:x="96" fg:w="10"/><text x="9.0171%" y="287.50"></text></g><g><title>[libc.so.6] (5 samples, 0.46%)</title><rect x="9.6804%" y="261" width="0.4566%" height="15" fill="rgb(251,118,11)" fg:x="106" fg:w="5"/><text x="9.9304%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.09%)</title><rect x="10.1370%" y="245" width="0.0913%" height="15" fill="rgb(217,147,25)" fg:x="111" fg:w="1"/><text x="10.3870%" y="255.50"></text></g><g><title>[libc.so.6] (2 samples, 0.18%)</title><rect x="10.2283%" y="245" width="0.1826%" height="15" fill="rgb(247,81,37)" fg:x="112" fg:w="2"/><text x="10.4783%" y="255.50"></text></g><g><title>chess::make_move::update_game_state (1 samples, 0.09%)</title><rect x="10.4110%" y="245" width="0.0913%" height="15" fill="rgb(209,12,38)" fg:x="114" fg:w="1"/><text x="10.6610%" y="255.50"></text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="10.4110%" y="229" width="0.0913%" height="15" fill="rgb(227,1,9)" fg:x="114" fg:w="1"/><text x="10.6610%" y="239.50"></text></g><g><title>chess::piece::PieceList::make_move (1 samples, 0.09%)</title><rect x="10.5023%" y="245" width="0.0913%" height="15" fill="rgb(248,47,43)" fg:x="115" fg:w="1"/><text x="10.7523%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.09%)</title><rect x="10.5023%" y="229" width="0.0913%" height="15" fill="rgb(221,10,30)" fg:x="115" fg:w="1"/><text x="10.7523%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.09%)</title><rect x="10.5023%" y="213" width="0.0913%" height="15" fill="rgb(210,229,1)" fg:x="115" fg:w="1"/><text x="10.7523%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.09%)</title><rect x="10.5023%" y="197" width="0.0913%" height="15" fill="rgb(222,148,37)" fg:x="115" fg:w="1"/><text x="10.7523%" y="207.50"></text></g><g><title>chess::make_move::make_move (11 samples, 1.00%)</title><rect x="9.6804%" y="277" width="1.0046%" height="15" fill="rgb(234,67,33)" fg:x="106" fg:w="11"/><text x="9.9304%" y="287.50"></text></g><g><title>chess::make_move::aux (6 samples, 0.55%)</title><rect x="10.1370%" y="261" width="0.5479%" height="15" fill="rgb(247,98,35)" fg:x="111" fg:w="6"/><text x="10.3870%" y="271.50"></text></g><g><title>chess::zobrist_hashing::Hash::hash_move (1 samples, 0.09%)</title><rect x="10.5936%" y="245" width="0.0913%" height="15" fill="rgb(247,138,52)" fg:x="116" fg:w="1"/><text x="10.8436%" y="255.50"></text></g><g><title>chess::api::board120_to_board64 (1 samples, 0.09%)</title><rect x="10.5936%" y="229" width="0.0913%" height="15" fill="rgb(213,79,30)" fg:x="116" fg:w="1"/><text x="10.8436%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (2 samples, 0.18%)</title><rect x="10.6849%" y="261" width="0.1826%" height="15" fill="rgb(246,177,23)" fg:x="117" fg:w="2"/><text x="10.9349%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.18%)</title><rect x="10.6849%" y="245" width="0.1826%" height="15" fill="rgb(230,62,27)" fg:x="117" fg:w="2"/><text x="10.9349%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.18%)</title><rect x="10.6849%" y="229" width="0.1826%" height="15" fill="rgb(216,154,8)" fg:x="117" fg:w="2"/><text x="10.9349%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.18%)</title><rect x="10.6849%" y="213" width="0.1826%" height="15" fill="rgb(244,35,45)" fg:x="117" fg:w="2"/><text x="10.9349%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.18%)</title><rect x="10.6849%" y="197" width="0.1826%" height="15" fill="rgb(251,115,12)" fg:x="117" fg:w="2"/><text x="10.9349%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.18%)</title><rect x="10.6849%" y="181" width="0.1826%" height="15" fill="rgb(240,54,50)" fg:x="117" fg:w="2"/><text x="10.9349%" y="191.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.18%)</title><rect x="10.6849%" y="165" width="0.1826%" height="15" fill="rgb(233,84,52)" fg:x="117" fg:w="2"/><text x="10.9349%" y="175.50"></text></g><g><title>chess::attack_gen::attack_gen (1 samples, 0.09%)</title><rect x="10.8676%" y="261" width="0.0913%" height="15" fill="rgb(207,117,47)" fg:x="119" fg:w="1"/><text x="11.1176%" y="271.50"></text></g><g><title>chess::attack_gen::king_moves (1 samples, 0.09%)</title><rect x="10.8676%" y="245" width="0.0913%" height="15" fill="rgb(249,43,39)" fg:x="119" fg:w="1"/><text x="11.1176%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.09%)</title><rect x="10.8676%" y="229" width="0.0913%" height="15" fill="rgb(209,38,44)" fg:x="119" fg:w="1"/><text x="11.1176%" y="239.50"></text></g><g><title>chess::move_gen::direction_sliding (1 samples, 0.09%)</title><rect x="10.9589%" y="261" width="0.0913%" height="15" fill="rgb(236,212,23)" fg:x="120" fg:w="1"/><text x="11.2089%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.09%)</title><rect x="10.9589%" y="245" width="0.0913%" height="15" fill="rgb(242,79,21)" fg:x="120" fg:w="1"/><text x="11.2089%" y="255.50"></text></g><g><title>chess::move_gen::king_moves (1 samples, 0.09%)</title><rect x="11.0502%" y="261" width="0.0913%" height="15" fill="rgb(211,96,35)" fg:x="121" fg:w="1"/><text x="11.3002%" y="271.50"></text></g><g><title>chess::move_gen::move_gen (1 samples, 0.09%)</title><rect x="11.0502%" y="245" width="0.0913%" height="15" fill="rgb(253,215,40)" fg:x="121" fg:w="1"/><text x="11.3002%" y="255.50"></text></g><g><title>chess::move_gen::pawn_moves (2 samples, 0.18%)</title><rect x="11.1416%" y="261" width="0.1826%" height="15" fill="rgb(211,81,21)" fg:x="122" fg:w="2"/><text x="11.3916%" y="271.50"></text></g><g><title>chess::move_gen::discover_check (1 samples, 0.09%)</title><rect x="11.2329%" y="245" width="0.0913%" height="15" fill="rgb(208,190,38)" fg:x="123" fg:w="1"/><text x="11.4829%" y="255.50"></text></g><g><title>chess::move_gen::move_gen (8 samples, 0.73%)</title><rect x="10.6849%" y="277" width="0.7306%" height="15" fill="rgb(235,213,38)" fg:x="117" fg:w="8"/><text x="10.9349%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chess::move_gen::Move&gt;&gt; (1 samples, 0.09%)</title><rect x="11.3242%" y="261" width="0.0913%" height="15" fill="rgb(237,122,38)" fg:x="124" fg:w="1"/><text x="11.5742%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chess::move_gen::Move&gt;&gt; (1 samples, 0.09%)</title><rect x="11.3242%" y="245" width="0.0913%" height="15" fill="rgb(244,218,35)" fg:x="124" fg:w="1"/><text x="11.5742%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.09%)</title><rect x="11.3242%" y="229" width="0.0913%" height="15" fill="rgb(240,68,47)" fg:x="124" fg:w="1"/><text x="11.5742%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.09%)</title><rect x="11.3242%" y="213" width="0.0913%" height="15" fill="rgb(210,16,53)" fg:x="124" fg:w="1"/><text x="11.5742%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.09%)</title><rect x="11.3242%" y="197" width="0.0913%" height="15" fill="rgb(235,124,12)" fg:x="124" fg:w="1"/><text x="11.5742%" y="207.50"></text></g><g><title>free (1 samples, 0.09%)</title><rect x="11.3242%" y="181" width="0.0913%" height="15" fill="rgb(224,169,11)" fg:x="124" fg:w="1"/><text x="11.5742%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="11.3242%" y="165" width="0.0913%" height="15" fill="rgb(250,166,2)" fg:x="124" fg:w="1"/><text x="11.5742%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.18%)</title><rect x="13.7900%" y="261" width="0.1826%" height="15" fill="rgb(242,216,29)" fg:x="151" fg:w="2"/><text x="14.0400%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.18%)</title><rect x="13.7900%" y="245" width="0.1826%" height="15" fill="rgb(230,116,27)" fg:x="151" fg:w="2"/><text x="14.0400%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.18%)</title><rect x="13.9726%" y="245" width="0.1826%" height="15" fill="rgb(228,99,48)" fg:x="153" fg:w="2"/><text x="14.2226%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (4 samples, 0.37%)</title><rect x="13.9726%" y="261" width="0.3653%" height="15" fill="rgb(253,11,6)" fg:x="153" fg:w="4"/><text x="14.2226%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.18%)</title><rect x="14.1553%" y="245" width="0.1826%" height="15" fill="rgb(247,143,39)" fg:x="155" fg:w="2"/><text x="14.4053%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.18%)</title><rect x="14.1553%" y="229" width="0.1826%" height="15" fill="rgb(236,97,10)" fg:x="155" fg:w="2"/><text x="14.4053%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.18%)</title><rect x="14.3379%" y="261" width="0.1826%" height="15" fill="rgb(233,208,19)" fg:x="157" fg:w="2"/><text x="14.5879%" y="271.50"></text></g><g><title>[libc.so.6] (251 samples, 22.92%)</title><rect x="14.5205%" y="261" width="22.9224%" height="15" fill="rgb(216,164,2)" fg:x="159" fg:w="251"/><text x="14.7705%" y="271.50">[libc.so.6]</text></g><g><title>chess::unmake::unmake_move (2 samples, 0.18%)</title><rect x="37.2603%" y="245" width="0.1826%" height="15" fill="rgb(220,129,5)" fg:x="408" fg:w="2"/><text x="37.5103%" y="255.50"></text></g><g><title>chess::unmake::unmake_move (2 samples, 0.18%)</title><rect x="37.2603%" y="229" width="0.1826%" height="15" fill="rgb(242,17,10)" fg:x="408" fg:w="2"/><text x="37.5103%" y="239.50"></text></g><g><title>[libc.so.6] (34 samples, 3.11%)</title><rect x="37.8082%" y="245" width="3.1050%" height="15" fill="rgb(242,107,0)" fg:x="414" fg:w="34"/><text x="38.0582%" y="255.50">[li..</text></g><g><title>[libc.so.6] (122 samples, 11.14%)</title><rect x="43.2877%" y="229" width="11.1416%" height="15" fill="rgb(251,28,31)" fg:x="474" fg:w="122"/><text x="43.5377%" y="239.50">[libc.so.6]</text></g><g><title>chess::make_move::aux (29 samples, 2.65%)</title><rect x="54.4292%" y="229" width="2.6484%" height="15" fill="rgb(233,223,10)" fg:x="596" fg:w="29"/><text x="54.6792%" y="239.50">ch..</text></g><g><title>chess::zobrist_hashing::HashingNumbers::hash_move (18 samples, 1.64%)</title><rect x="55.4338%" y="213" width="1.6438%" height="15" fill="rgb(215,21,27)" fg:x="607" fg:w="18"/><text x="55.6838%" y="223.50"></text></g><g><title>[libc.so.6] (47 samples, 4.29%)</title><rect x="58.2648%" y="213" width="4.2922%" height="15" fill="rgb(232,23,21)" fg:x="638" fg:w="47"/><text x="58.5148%" y="223.50">[libc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.27%)</title><rect x="62.5571%" y="213" width="0.2740%" height="15" fill="rgb(244,5,23)" fg:x="685" fg:w="3"/><text x="62.8071%" y="223.50"></text></g><g><title>chess::make_move::aux (1 samples, 0.09%)</title><rect x="62.8311%" y="213" width="0.0913%" height="15" fill="rgb(226,81,46)" fg:x="688" fg:w="1"/><text x="63.0811%" y="223.50"></text></g><g><title>chess::piece::PieceList::remove (3 samples, 0.27%)</title><rect x="62.9224%" y="213" width="0.2740%" height="15" fill="rgb(247,70,30)" fg:x="689" fg:w="3"/><text x="63.1724%" y="223.50"></text></g><g><title>chess::zobrist_hashing::Hash::hash_en_passant (4 samples, 0.37%)</title><rect x="63.1963%" y="213" width="0.3653%" height="15" fill="rgb(212,68,19)" fg:x="692" fg:w="4"/><text x="63.4463%" y="223.50"></text></g><g><title>chess::make_move::update_game_state (72 samples, 6.58%)</title><rect x="57.0776%" y="229" width="6.5753%" height="15" fill="rgb(240,187,13)" fg:x="625" fg:w="72"/><text x="57.3276%" y="239.50">chess::ma..</text></g><g><title>core::num::&lt;impl i8&gt;::abs (1 samples, 0.09%)</title><rect x="63.5616%" y="213" width="0.0913%" height="15" fill="rgb(223,113,26)" fg:x="696" fg:w="1"/><text x="63.8116%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (4 samples, 0.37%)</title><rect x="64.9315%" y="213" width="0.3653%" height="15" fill="rgb(206,192,2)" fg:x="711" fg:w="4"/><text x="65.1815%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (4 samples, 0.37%)</title><rect x="64.9315%" y="197" width="0.3653%" height="15" fill="rgb(241,108,4)" fg:x="711" fg:w="4"/><text x="65.1815%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (4 samples, 0.37%)</title><rect x="64.9315%" y="181" width="0.3653%" height="15" fill="rgb(247,173,49)" fg:x="711" fg:w="4"/><text x="65.1815%" y="191.50"></text></g><g><title>chess::piece::PieceList::make_move (21 samples, 1.92%)</title><rect x="63.6530%" y="229" width="1.9178%" height="15" fill="rgb(224,114,35)" fg:x="697" fg:w="21"/><text x="63.9030%" y="239.50">c..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.27%)</title><rect x="65.2968%" y="213" width="0.2740%" height="15" fill="rgb(245,159,27)" fg:x="715" fg:w="3"/><text x="65.5468%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.27%)</title><rect x="65.2968%" y="197" width="0.2740%" height="15" fill="rgb(245,172,44)" fg:x="715" fg:w="3"/><text x="65.5468%" y="207.50"></text></g><g><title>chess::make_move::make_move (322 samples, 29.41%)</title><rect x="37.4429%" y="261" width="29.4064%" height="15" fill="rgb(236,23,11)" fg:x="410" fg:w="322"/><text x="37.6929%" y="271.50">chess::make_move::make_move</text></g><g><title>chess::make_move::aux (284 samples, 25.94%)</title><rect x="40.9132%" y="245" width="25.9361%" height="15" fill="rgb(205,117,38)" fg:x="448" fg:w="284"/><text x="41.1632%" y="255.50">chess::make_move::aux</text></g><g><title>chess::zobrist_hashing::Hash::hash_move (14 samples, 1.28%)</title><rect x="65.5708%" y="229" width="1.2785%" height="15" fill="rgb(237,72,25)" fg:x="718" fg:w="14"/><text x="65.8208%" y="239.50"></text></g><g><title>chess::api::board120_to_board64 (13 samples, 1.19%)</title><rect x="65.6621%" y="213" width="1.1872%" height="15" fill="rgb(244,70,9)" fg:x="719" fg:w="13"/><text x="65.9121%" y="223.50"></text></g><g><title>[libc.so.6] (5 samples, 0.46%)</title><rect x="67.1233%" y="245" width="0.4566%" height="15" fill="rgb(217,125,39)" fg:x="735" fg:w="5"/><text x="67.3733%" y="255.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (9 samples, 0.82%)</title><rect x="67.6712%" y="149" width="0.8219%" height="15" fill="rgb(235,36,10)" fg:x="741" fg:w="9"/><text x="67.9212%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.09%)</title><rect x="68.4932%" y="149" width="0.0913%" height="15" fill="rgb(251,123,47)" fg:x="750" fg:w="1"/><text x="68.7432%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.09%)</title><rect x="68.5845%" y="149" width="0.0913%" height="15" fill="rgb(221,13,13)" fg:x="751" fg:w="1"/><text x="68.8345%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (14 samples, 1.28%)</title><rect x="68.7671%" y="133" width="1.2785%" height="15" fill="rgb(238,131,9)" fg:x="753" fg:w="14"/><text x="69.0171%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (14 samples, 1.28%)</title><rect x="68.7671%" y="117" width="1.2785%" height="15" fill="rgb(211,50,8)" fg:x="753" fg:w="14"/><text x="69.0171%" y="127.50"></text></g><g><title>alloc::alloc::realloc (14 samples, 1.28%)</title><rect x="68.7671%" y="101" width="1.2785%" height="15" fill="rgb(245,182,24)" fg:x="753" fg:w="14"/><text x="69.0171%" y="111.50"></text></g><g><title>realloc (13 samples, 1.19%)</title><rect x="68.8584%" y="85" width="1.1872%" height="15" fill="rgb(242,14,37)" fg:x="754" fg:w="13"/><text x="69.1084%" y="95.50"></text></g><g><title>[libc.so.6] (9 samples, 0.82%)</title><rect x="69.2237%" y="69" width="0.8219%" height="15" fill="rgb(246,228,12)" fg:x="758" fg:w="9"/><text x="69.4737%" y="79.50"></text></g><g><title>[libc.so.6] (9 samples, 0.82%)</title><rect x="69.2237%" y="53" width="0.8219%" height="15" fill="rgb(213,55,15)" fg:x="758" fg:w="9"/><text x="69.4737%" y="63.50"></text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="69.9543%" y="37" width="0.0913%" height="15" fill="rgb(209,9,3)" fg:x="766" fg:w="1"/><text x="70.2043%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (29 samples, 2.65%)</title><rect x="67.5799%" y="213" width="2.6484%" height="15" fill="rgb(230,59,30)" fg:x="740" fg:w="29"/><text x="67.8299%" y="223.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (29 samples, 2.65%)</title><rect x="67.5799%" y="197" width="2.6484%" height="15" fill="rgb(209,121,21)" fg:x="740" fg:w="29"/><text x="67.8299%" y="207.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (29 samples, 2.65%)</title><rect x="67.5799%" y="181" width="2.6484%" height="15" fill="rgb(220,109,13)" fg:x="740" fg:w="29"/><text x="67.8299%" y="191.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (29 samples, 2.65%)</title><rect x="67.5799%" y="165" width="2.6484%" height="15" fill="rgb(232,18,1)" fg:x="740" fg:w="29"/><text x="67.8299%" y="175.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (17 samples, 1.55%)</title><rect x="68.6758%" y="149" width="1.5525%" height="15" fill="rgb(215,41,42)" fg:x="752" fg:w="17"/><text x="68.9258%" y="159.50"></text></g><g><title>malloc (2 samples, 0.18%)</title><rect x="70.0457%" y="133" width="0.1826%" height="15" fill="rgb(224,123,36)" fg:x="767" fg:w="2"/><text x="70.2957%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (32 samples, 2.92%)</title><rect x="67.5799%" y="245" width="2.9224%" height="15" fill="rgb(240,125,3)" fg:x="740" fg:w="32"/><text x="67.8299%" y="255.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (32 samples, 2.92%)</title><rect x="67.5799%" y="229" width="2.9224%" height="15" fill="rgb(205,98,50)" fg:x="740" fg:w="32"/><text x="67.8299%" y="239.50">al..</text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.27%)</title><rect x="70.2283%" y="213" width="0.2740%" height="15" fill="rgb(205,185,37)" fg:x="769" fg:w="3"/><text x="70.4783%" y="223.50"></text></g><g><title>[libc.so.6] (2 samples, 0.18%)</title><rect x="70.3196%" y="197" width="0.1826%" height="15" fill="rgb(238,207,15)" fg:x="770" fg:w="2"/><text x="70.5696%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (1 samples, 0.09%)</title><rect x="70.5023%" y="245" width="0.0913%" height="15" fill="rgb(213,199,42)" fg:x="772" fg:w="1"/><text x="70.7523%" y="255.50"></text></g><g><title>chess::attack_gen::attack_gen (3 samples, 0.27%)</title><rect x="70.6849%" y="229" width="0.2740%" height="15" fill="rgb(235,201,11)" fg:x="774" fg:w="3"/><text x="70.9349%" y="239.50"></text></g><g><title>chess::attack_gen::direction_sliding (6 samples, 0.55%)</title><rect x="70.9589%" y="229" width="0.5479%" height="15" fill="rgb(207,46,11)" fg:x="777" fg:w="6"/><text x="71.2089%" y="239.50"></text></g><g><title>chess::attack_gen::attack_gen (1 samples, 0.09%)</title><rect x="71.4155%" y="213" width="0.0913%" height="15" fill="rgb(241,35,35)" fg:x="782" fg:w="1"/><text x="71.6655%" y="223.50"></text></g><g><title>chess::attack_gen::knight_moves (2 samples, 0.18%)</title><rect x="71.5068%" y="229" width="0.1826%" height="15" fill="rgb(243,32,47)" fg:x="783" fg:w="2"/><text x="71.7568%" y="239.50"></text></g><g><title>chess::attack_gen::pawn_moves (3 samples, 0.27%)</title><rect x="71.6895%" y="229" width="0.2740%" height="15" fill="rgb(247,202,23)" fg:x="785" fg:w="3"/><text x="71.9395%" y="239.50"></text></g><g><title>chess::attack_gen::attack_gen (16 samples, 1.46%)</title><rect x="70.5936%" y="245" width="1.4612%" height="15" fill="rgb(219,102,11)" fg:x="773" fg:w="16"/><text x="70.8436%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (1 samples, 0.09%)</title><rect x="71.9635%" y="229" width="0.0913%" height="15" fill="rgb(243,110,44)" fg:x="788" fg:w="1"/><text x="72.2135%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.09%)</title><rect x="72.8767%" y="229" width="0.0913%" height="15" fill="rgb(222,74,54)" fg:x="798" fg:w="1"/><text x="73.1267%" y="239.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.09%)</title><rect x="72.8767%" y="213" width="0.0913%" height="15" fill="rgb(216,99,12)" fg:x="798" fg:w="1"/><text x="73.1267%" y="223.50"></text></g><g><title>chess::move_gen::direction_sliding (1 samples, 0.09%)</title><rect x="72.8767%" y="197" width="0.0913%" height="15" fill="rgb(226,22,26)" fg:x="798" fg:w="1"/><text x="73.1267%" y="207.50"></text></g><g><title>&lt;i8 as core::ops::arith::AddAssign&lt;&amp;i8&gt;&gt;::add_assign (1 samples, 0.09%)</title><rect x="72.9680%" y="229" width="0.0913%" height="15" fill="rgb(217,163,10)" fg:x="799" fg:w="1"/><text x="73.2180%" y="239.50"></text></g><g><title>&lt;i8 as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.09%)</title><rect x="72.9680%" y="213" width="0.0913%" height="15" fill="rgb(213,25,53)" fg:x="799" fg:w="1"/><text x="73.2180%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.09%)</title><rect x="73.1507%" y="165" width="0.0913%" height="15" fill="rgb(252,105,26)" fg:x="801" fg:w="1"/><text x="73.4007%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.09%)</title><rect x="73.1507%" y="149" width="0.0913%" height="15" fill="rgb(220,39,43)" fg:x="801" fg:w="1"/><text x="73.4007%" y="159.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.09%)</title><rect x="73.1507%" y="133" width="0.0913%" height="15" fill="rgb(229,68,48)" fg:x="801" fg:w="1"/><text x="73.4007%" y="143.50"></text></g><g><title>realloc (1 samples, 0.09%)</title><rect x="73.1507%" y="117" width="0.0913%" height="15" fill="rgb(252,8,32)" fg:x="801" fg:w="1"/><text x="73.4007%" y="127.50"></text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="73.1507%" y="101" width="0.0913%" height="15" fill="rgb(223,20,43)" fg:x="801" fg:w="1"/><text x="73.4007%" y="111.50"></text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="73.1507%" y="85" width="0.0913%" height="15" fill="rgb(229,81,49)" fg:x="801" fg:w="1"/><text x="73.4007%" y="95.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.09%)</title><rect x="73.2420%" y="165" width="0.0913%" height="15" fill="rgb(236,28,36)" fg:x="802" fg:w="1"/><text x="73.4920%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.37%)</title><rect x="73.1507%" y="213" width="0.3653%" height="15" fill="rgb(249,185,26)" fg:x="801" fg:w="4"/><text x="73.4007%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.37%)</title><rect x="73.1507%" y="197" width="0.3653%" height="15" fill="rgb(249,174,33)" fg:x="801" fg:w="4"/><text x="73.4007%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.37%)</title><rect x="73.1507%" y="181" width="0.3653%" height="15" fill="rgb(233,201,37)" fg:x="801" fg:w="4"/><text x="73.4007%" y="191.50"></text></g><g><title>malloc (2 samples, 0.18%)</title><rect x="73.3333%" y="165" width="0.1826%" height="15" fill="rgb(221,78,26)" fg:x="803" fg:w="2"/><text x="73.5833%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (8 samples, 0.73%)</title><rect x="73.0594%" y="229" width="0.7306%" height="15" fill="rgb(250,127,30)" fg:x="800" fg:w="8"/><text x="73.3094%" y="239.50"></text></g><g><title>core::ptr::write (3 samples, 0.27%)</title><rect x="73.5160%" y="213" width="0.2740%" height="15" fill="rgb(230,49,44)" fg:x="805" fg:w="3"/><text x="73.7660%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (1 samples, 0.09%)</title><rect x="73.7900%" y="229" width="0.0913%" height="15" fill="rgb(229,67,23)" fg:x="808" fg:w="1"/><text x="74.0400%" y="239.50"></text></g><g><title>chess::move_gen::direction_sliding (21 samples, 1.92%)</title><rect x="72.0548%" y="245" width="1.9178%" height="15" fill="rgb(249,83,47)" fg:x="789" fg:w="21"/><text x="72.3048%" y="255.50">c..</text></g><g><title>chess::move_gen::direction_sliding (1 samples, 0.09%)</title><rect x="73.8813%" y="229" width="0.0913%" height="15" fill="rgb(215,43,3)" fg:x="809" fg:w="1"/><text x="74.1313%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (1 samples, 0.09%)</title><rect x="74.3379%" y="229" width="0.0913%" height="15" fill="rgb(238,154,13)" fg:x="814" fg:w="1"/><text x="74.5879%" y="239.50"></text></g><g><title>chess::move_gen::get_pinned_pieces (6 samples, 0.55%)</title><rect x="73.9726%" y="245" width="0.5479%" height="15" fill="rgb(219,56,2)" fg:x="810" fg:w="6"/><text x="74.2226%" y="255.50"></text></g><g><title>chess::piece::PieceList::add_piece (1 samples, 0.09%)</title><rect x="74.4292%" y="229" width="0.0913%" height="15" fill="rgb(233,0,4)" fg:x="815" fg:w="1"/><text x="74.6792%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.09%)</title><rect x="74.4292%" y="213" width="0.0913%" height="15" fill="rgb(235,30,7)" fg:x="815" fg:w="1"/><text x="74.6792%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.09%)</title><rect x="74.4292%" y="197" width="0.0913%" height="15" fill="rgb(250,79,13)" fg:x="815" fg:w="1"/><text x="74.6792%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.09%)</title><rect x="74.4292%" y="181" width="0.0913%" height="15" fill="rgb(211,146,34)" fg:x="815" fg:w="1"/><text x="74.6792%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="74.4292%" y="165" width="0.0913%" height="15" fill="rgb(228,22,38)" fg:x="815" fg:w="1"/><text x="74.6792%" y="175.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="74.4292%" y="149" width="0.0913%" height="15" fill="rgb(235,168,5)" fg:x="815" fg:w="1"/><text x="74.6792%" y="159.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.09%)</title><rect x="74.8858%" y="229" width="0.0913%" height="15" fill="rgb(221,155,16)" fg:x="820" fg:w="1"/><text x="75.1358%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.09%)</title><rect x="74.8858%" y="213" width="0.0913%" height="15" fill="rgb(215,215,53)" fg:x="820" fg:w="1"/><text x="75.1358%" y="223.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.09%)</title><rect x="74.8858%" y="197" width="0.0913%" height="15" fill="rgb(223,4,10)" fg:x="820" fg:w="1"/><text x="75.1358%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.09%)</title><rect x="74.8858%" y="181" width="0.0913%" height="15" fill="rgb(234,103,6)" fg:x="820" fg:w="1"/><text x="75.1358%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.09%)</title><rect x="74.8858%" y="165" width="0.0913%" height="15" fill="rgb(227,97,0)" fg:x="820" fg:w="1"/><text x="75.1358%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.18%)</title><rect x="74.9772%" y="229" width="0.1826%" height="15" fill="rgb(234,150,53)" fg:x="821" fg:w="2"/><text x="75.2272%" y="239.50"></text></g><g><title>chess::move_gen::king_moves (9 samples, 0.82%)</title><rect x="74.5205%" y="245" width="0.8219%" height="15" fill="rgb(228,201,54)" fg:x="816" fg:w="9"/><text x="74.7705%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.18%)</title><rect x="75.1598%" y="229" width="0.1826%" height="15" fill="rgb(222,22,37)" fg:x="823" fg:w="2"/><text x="75.4098%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.18%)</title><rect x="75.1598%" y="213" width="0.1826%" height="15" fill="rgb(237,53,32)" fg:x="823" fg:w="2"/><text x="75.4098%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.18%)</title><rect x="75.1598%" y="197" width="0.1826%" height="15" fill="rgb(233,25,53)" fg:x="823" fg:w="2"/><text x="75.4098%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.18%)</title><rect x="75.1598%" y="181" width="0.1826%" height="15" fill="rgb(210,40,34)" fg:x="823" fg:w="2"/><text x="75.4098%" y="191.50"></text></g><g><title>malloc (2 samples, 0.18%)</title><rect x="75.1598%" y="165" width="0.1826%" height="15" fill="rgb(241,220,44)" fg:x="823" fg:w="2"/><text x="75.4098%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="75.8904%" y="181" width="0.0913%" height="15" fill="rgb(235,28,35)" fg:x="831" fg:w="1"/><text x="76.1404%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.09%)</title><rect x="75.8904%" y="165" width="0.0913%" height="15" fill="rgb(210,56,17)" fg:x="831" fg:w="1"/><text x="76.1404%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.09%)</title><rect x="75.8904%" y="149" width="0.0913%" height="15" fill="rgb(224,130,29)" fg:x="831" fg:w="1"/><text x="76.1404%" y="159.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.09%)</title><rect x="75.8904%" y="133" width="0.0913%" height="15" fill="rgb(235,212,8)" fg:x="831" fg:w="1"/><text x="76.1404%" y="143.50"></text></g><g><title>realloc (1 samples, 0.09%)</title><rect x="75.8904%" y="117" width="0.0913%" height="15" fill="rgb(223,33,50)" fg:x="831" fg:w="1"/><text x="76.1404%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.18%)</title><rect x="75.8904%" y="229" width="0.1826%" height="15" fill="rgb(219,149,13)" fg:x="831" fg:w="2"/><text x="76.1404%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.18%)</title><rect x="75.8904%" y="213" width="0.1826%" height="15" fill="rgb(250,156,29)" fg:x="831" fg:w="2"/><text x="76.1404%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.18%)</title><rect x="75.8904%" y="197" width="0.1826%" height="15" fill="rgb(216,193,19)" fg:x="831" fg:w="2"/><text x="76.1404%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.09%)</title><rect x="75.9817%" y="181" width="0.0913%" height="15" fill="rgb(216,135,14)" fg:x="832" fg:w="1"/><text x="76.2317%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.09%)</title><rect x="75.9817%" y="165" width="0.0913%" height="15" fill="rgb(241,47,5)" fg:x="832" fg:w="1"/><text x="76.2317%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.09%)</title><rect x="75.9817%" y="149" width="0.0913%" height="15" fill="rgb(233,42,35)" fg:x="832" fg:w="1"/><text x="76.2317%" y="159.50"></text></g><g><title>chess::move_gen::knight_moves (9 samples, 0.82%)</title><rect x="75.3425%" y="245" width="0.8219%" height="15" fill="rgb(231,13,6)" fg:x="825" fg:w="9"/><text x="75.5925%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (1 samples, 0.09%)</title><rect x="76.0731%" y="229" width="0.0913%" height="15" fill="rgb(207,181,40)" fg:x="833" fg:w="1"/><text x="76.3231%" y="239.50"></text></g><g><title>chess::move_gen::move_gen (3 samples, 0.27%)</title><rect x="76.1644%" y="245" width="0.2740%" height="15" fill="rgb(254,173,49)" fg:x="834" fg:w="3"/><text x="76.4144%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.09%)</title><rect x="77.2603%" y="181" width="0.0913%" height="15" fill="rgb(221,1,38)" fg:x="846" fg:w="1"/><text x="77.5103%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.09%)</title><rect x="77.2603%" y="165" width="0.0913%" height="15" fill="rgb(206,124,46)" fg:x="846" fg:w="1"/><text x="77.5103%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.09%)</title><rect x="77.2603%" y="149" width="0.0913%" height="15" fill="rgb(249,21,11)" fg:x="846" fg:w="1"/><text x="77.5103%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.09%)</title><rect x="77.2603%" y="133" width="0.0913%" height="15" fill="rgb(222,201,40)" fg:x="846" fg:w="1"/><text x="77.5103%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (7 samples, 0.64%)</title><rect x="77.3516%" y="165" width="0.6393%" height="15" fill="rgb(235,61,29)" fg:x="847" fg:w="7"/><text x="77.6016%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (7 samples, 0.64%)</title><rect x="77.3516%" y="149" width="0.6393%" height="15" fill="rgb(219,207,3)" fg:x="847" fg:w="7"/><text x="77.6016%" y="159.50"></text></g><g><title>alloc::alloc::realloc (7 samples, 0.64%)</title><rect x="77.3516%" y="133" width="0.6393%" height="15" fill="rgb(222,56,46)" fg:x="847" fg:w="7"/><text x="77.6016%" y="143.50"></text></g><g><title>realloc (7 samples, 0.64%)</title><rect x="77.3516%" y="117" width="0.6393%" height="15" fill="rgb(239,76,54)" fg:x="847" fg:w="7"/><text x="77.6016%" y="127.50"></text></g><g><title>[libc.so.6] (4 samples, 0.37%)</title><rect x="77.6256%" y="101" width="0.3653%" height="15" fill="rgb(231,124,27)" fg:x="850" fg:w="4"/><text x="77.8756%" y="111.50"></text></g><g><title>[libc.so.6] (2 samples, 0.18%)</title><rect x="77.8082%" y="85" width="0.1826%" height="15" fill="rgb(249,195,6)" fg:x="852" fg:w="2"/><text x="78.0582%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.82%)</title><rect x="77.3516%" y="181" width="0.8219%" height="15" fill="rgb(237,174,47)" fg:x="847" fg:w="9"/><text x="77.6016%" y="191.50"></text></g><g><title>malloc (2 samples, 0.18%)</title><rect x="77.9909%" y="165" width="0.1826%" height="15" fill="rgb(206,201,31)" fg:x="854" fg:w="2"/><text x="78.2409%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.09%)</title><rect x="78.1735%" y="181" width="0.0913%" height="15" fill="rgb(231,57,52)" fg:x="856" fg:w="1"/><text x="78.4235%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.09%)</title><rect x="78.1735%" y="165" width="0.0913%" height="15" fill="rgb(248,177,22)" fg:x="856" fg:w="1"/><text x="78.4235%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.09%)</title><rect x="78.1735%" y="149" width="0.0913%" height="15" fill="rgb(215,211,37)" fg:x="856" fg:w="1"/><text x="78.4235%" y="159.50"></text></g><g><title>core::cmp::max (1 samples, 0.09%)</title><rect x="78.2648%" y="181" width="0.0913%" height="15" fill="rgb(241,128,51)" fg:x="857" fg:w="1"/><text x="78.5148%" y="191.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.09%)</title><rect x="78.2648%" y="165" width="0.0913%" height="15" fill="rgb(227,165,31)" fg:x="857" fg:w="1"/><text x="78.5148%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.09%)</title><rect x="78.2648%" y="149" width="0.0913%" height="15" fill="rgb(228,167,24)" fg:x="857" fg:w="1"/><text x="78.5148%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (13 samples, 1.19%)</title><rect x="77.2603%" y="213" width="1.1872%" height="15" fill="rgb(228,143,12)" fg:x="846" fg:w="13"/><text x="77.5103%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (13 samples, 1.19%)</title><rect x="77.2603%" y="197" width="1.1872%" height="15" fill="rgb(249,149,8)" fg:x="846" fg:w="13"/><text x="77.5103%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.09%)</title><rect x="78.3562%" y="181" width="0.0913%" height="15" fill="rgb(243,35,44)" fg:x="858" fg:w="1"/><text x="78.6062%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.09%)</title><rect x="78.3562%" y="165" width="0.0913%" height="15" fill="rgb(246,89,9)" fg:x="858" fg:w="1"/><text x="78.6062%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.09%)</title><rect x="78.4475%" y="213" width="0.0913%" height="15" fill="rgb(233,213,13)" fg:x="859" fg:w="1"/><text x="78.6975%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.09%)</title><rect x="78.4475%" y="197" width="0.0913%" height="15" fill="rgb(233,141,41)" fg:x="859" fg:w="1"/><text x="78.6975%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (17 samples, 1.55%)</title><rect x="77.1689%" y="229" width="1.5525%" height="15" fill="rgb(239,167,4)" fg:x="845" fg:w="17"/><text x="77.4189%" y="239.50"></text></g><g><title>core::ptr::write (2 samples, 0.18%)</title><rect x="78.5388%" y="213" width="0.1826%" height="15" fill="rgb(209,217,16)" fg:x="860" fg:w="2"/><text x="78.7888%" y="223.50"></text></g><g><title>chess::move_gen::discover_check (14 samples, 1.28%)</title><rect x="78.7215%" y="229" width="1.2785%" height="15" fill="rgb(219,88,35)" fg:x="862" fg:w="14"/><text x="78.9715%" y="239.50"></text></g><g><title>chess::attack_gen::direction_sliding (9 samples, 0.82%)</title><rect x="79.1781%" y="213" width="0.8219%" height="15" fill="rgb(220,193,23)" fg:x="867" fg:w="9"/><text x="79.4281%" y="223.50"></text></g><g><title>chess::move_gen::is_pawn_move (1 samples, 0.09%)</title><rect x="80.0000%" y="229" width="0.0913%" height="15" fill="rgb(230,90,52)" fg:x="876" fg:w="1"/><text x="80.2500%" y="239.50"></text></g><g><title>chess::move_gen::pawn_moves (41 samples, 3.74%)</title><rect x="76.4384%" y="245" width="3.7443%" height="15" fill="rgb(252,106,19)" fg:x="837" fg:w="41"/><text x="76.6884%" y="255.50">ches..</text></g><g><title>chess::move_gen::pawn_moves (1 samples, 0.09%)</title><rect x="80.0913%" y="229" width="0.0913%" height="15" fill="rgb(206,74,20)" fg:x="877" fg:w="1"/><text x="80.3413%" y="239.50"></text></g><g><title>chess::piece::PieceList::diference (1 samples, 0.09%)</title><rect x="80.1826%" y="245" width="0.0913%" height="15" fill="rgb(230,138,44)" fg:x="878" fg:w="1"/><text x="80.4326%" y="255.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.09%)</title><rect x="80.1826%" y="229" width="0.0913%" height="15" fill="rgb(235,182,43)" fg:x="878" fg:w="1"/><text x="80.4326%" y="239.50"></text></g><g><title>chess::move_gen::move_gen (151 samples, 13.79%)</title><rect x="66.8493%" y="261" width="13.7900%" height="15" fill="rgb(242,16,51)" fg:x="732" fg:w="151"/><text x="67.0993%" y="271.50">chess::move_gen::move..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chess::move_gen::Move&gt;&gt; (4 samples, 0.37%)</title><rect x="80.2740%" y="245" width="0.3653%" height="15" fill="rgb(248,9,4)" fg:x="879" fg:w="4"/><text x="80.5240%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chess::move_gen::Move&gt;&gt; (4 samples, 0.37%)</title><rect x="80.2740%" y="229" width="0.3653%" height="15" fill="rgb(210,31,22)" fg:x="879" fg:w="4"/><text x="80.5240%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.37%)</title><rect x="80.2740%" y="213" width="0.3653%" height="15" fill="rgb(239,54,39)" fg:x="879" fg:w="4"/><text x="80.5240%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.37%)</title><rect x="80.2740%" y="197" width="0.3653%" height="15" fill="rgb(230,99,41)" fg:x="879" fg:w="4"/><text x="80.5240%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.37%)</title><rect x="80.2740%" y="181" width="0.3653%" height="15" fill="rgb(253,106,12)" fg:x="879" fg:w="4"/><text x="80.5240%" y="191.50"></text></g><g><title>free (3 samples, 0.27%)</title><rect x="80.3653%" y="165" width="0.2740%" height="15" fill="rgb(213,46,41)" fg:x="880" fg:w="3"/><text x="80.6153%" y="175.50"></text></g><g><title>[libc.so.6] (3 samples, 0.27%)</title><rect x="80.3653%" y="149" width="0.2740%" height="15" fill="rgb(215,133,35)" fg:x="880" fg:w="3"/><text x="80.6153%" y="159.50"></text></g><g><title>chess::perft::perft (37 samples, 3.38%)</title><rect x="80.6393%" y="261" width="3.3790%" height="15" fill="rgb(213,28,5)" fg:x="883" fg:w="37"/><text x="80.8893%" y="271.50">che..</text></g><g><title>[libc.so.6] (34 samples, 3.11%)</title><rect x="80.9132%" y="245" width="3.1050%" height="15" fill="rgb(215,77,49)" fg:x="886" fg:w="34"/><text x="81.1632%" y="255.50">[li..</text></g><g><title>[libc.so.6] (78 samples, 7.12%)</title><rect x="86.3927%" y="245" width="7.1233%" height="15" fill="rgb(248,100,22)" fg:x="946" fg:w="78"/><text x="86.6427%" y="255.50">[libc.so.6]</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (7 samples, 0.64%)</title><rect x="93.5160%" y="245" width="0.6393%" height="15" fill="rgb(208,67,9)" fg:x="1024" fg:w="7"/><text x="93.7660%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.18%)</title><rect x="93.9726%" y="229" width="0.1826%" height="15" fill="rgb(219,133,21)" fg:x="1029" fg:w="2"/><text x="94.2226%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.18%)</title><rect x="95.7078%" y="229" width="0.1826%" height="15" fill="rgb(246,46,29)" fg:x="1048" fg:w="2"/><text x="95.9578%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.18%)</title><rect x="95.7078%" y="213" width="0.1826%" height="15" fill="rgb(246,185,52)" fg:x="1048" fg:w="2"/><text x="95.9578%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.18%)</title><rect x="95.7078%" y="197" width="0.1826%" height="15" fill="rgb(252,136,11)" fg:x="1048" fg:w="2"/><text x="95.9578%" y="207.50"></text></g><g><title>chess::piece::PieceList::make_move (22 samples, 2.01%)</title><rect x="94.1553%" y="245" width="2.0091%" height="15" fill="rgb(219,138,53)" fg:x="1031" fg:w="22"/><text x="94.4053%" y="255.50">c..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.27%)</title><rect x="95.8904%" y="229" width="0.2740%" height="15" fill="rgb(211,51,23)" fg:x="1050" fg:w="3"/><text x="96.1404%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.27%)</title><rect x="95.8904%" y="213" width="0.2740%" height="15" fill="rgb(247,221,28)" fg:x="1050" fg:w="3"/><text x="96.1404%" y="223.50"></text></g><g><title>chess::unmake::unmake_move (13 samples, 1.19%)</title><rect x="96.1644%" y="245" width="1.1872%" height="15" fill="rgb(251,222,45)" fg:x="1053" fg:w="13"/><text x="96.4144%" y="255.50"></text></g><g><title>chess::zobrist_hashing::HashingNumbers::hash_move (11 samples, 1.00%)</title><rect x="96.3470%" y="229" width="1.0046%" height="15" fill="rgb(217,162,53)" fg:x="1055" fg:w="11"/><text x="96.5970%" y="239.50"></text></g><g><title>chess::zobrist_hashing::Hash::hash_en_passant (2 samples, 0.18%)</title><rect x="97.3516%" y="245" width="0.1826%" height="15" fill="rgb(229,93,14)" fg:x="1066" fg:w="2"/><text x="97.6016%" y="255.50"></text></g><g><title>chess::zobrist_hashing::Hash::hash_move (11 samples, 1.00%)</title><rect x="97.5342%" y="245" width="1.0046%" height="15" fill="rgb(209,67,49)" fg:x="1068" fg:w="11"/><text x="97.7842%" y="255.50"></text></g><g><title>chess::api::board120_to_board64 (10 samples, 0.91%)</title><rect x="97.6256%" y="229" width="0.9132%" height="15" fill="rgb(213,87,29)" fg:x="1069" fg:w="10"/><text x="97.8756%" y="239.50"></text></g><g><title>chess::zobrist_hashing::Hash::hash_turn (2 samples, 0.18%)</title><rect x="98.5388%" y="245" width="0.1826%" height="15" fill="rgb(205,151,52)" fg:x="1079" fg:w="2"/><text x="98.7888%" y="255.50"></text></g><g><title>chess::unmake::unmake_move (163 samples, 14.89%)</title><rect x="84.0183%" y="261" width="14.8858%" height="15" fill="rgb(253,215,39)" fg:x="920" fg:w="163"/><text x="84.2683%" y="271.50">chess::unmake::unmake_m..</text></g><g><title>core::slice::&lt;impl [T]&gt;::last (2 samples, 0.18%)</title><rect x="98.7215%" y="245" width="0.1826%" height="15" fill="rgb(221,220,41)" fg:x="1081" fg:w="2"/><text x="98.9715%" y="255.50"></text></g><g><title>chess::perft::perft (963 samples, 87.95%)</title><rect x="11.4155%" y="277" width="87.9452%" height="15" fill="rgb(218,133,21)" fg:x="125" fg:w="963"/><text x="11.6655%" y="287.50">chess::perft::perft</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chess::move_gen::Move&gt;&gt; (5 samples, 0.46%)</title><rect x="98.9041%" y="261" width="0.4566%" height="15" fill="rgb(221,193,43)" fg:x="1083" fg:w="5"/><text x="99.1541%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.46%)</title><rect x="98.9041%" y="245" width="0.4566%" height="15" fill="rgb(240,128,52)" fg:x="1083" fg:w="5"/><text x="99.1541%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chess::move_gen::Move,alloc::alloc::Global&gt;&gt; (5 samples, 0.46%)</title><rect x="98.9041%" y="229" width="0.4566%" height="15" fill="rgb(253,114,12)" fg:x="1083" fg:w="5"/><text x="99.1541%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.46%)</title><rect x="98.9041%" y="213" width="0.4566%" height="15" fill="rgb(215,223,47)" fg:x="1083" fg:w="5"/><text x="99.1541%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chess::move_gen::Move&gt;&gt; (5 samples, 0.46%)</title><rect x="98.9041%" y="197" width="0.4566%" height="15" fill="rgb(248,225,23)" fg:x="1083" fg:w="5"/><text x="99.1541%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.46%)</title><rect x="98.9041%" y="181" width="0.4566%" height="15" fill="rgb(250,108,0)" fg:x="1083" fg:w="5"/><text x="99.1541%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.46%)</title><rect x="98.9041%" y="165" width="0.4566%" height="15" fill="rgb(228,208,7)" fg:x="1083" fg:w="5"/><text x="99.1541%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.46%)</title><rect x="98.9041%" y="149" width="0.4566%" height="15" fill="rgb(244,45,10)" fg:x="1083" fg:w="5"/><text x="99.1541%" y="159.50"></text></g><g><title>free (5 samples, 0.46%)</title><rect x="98.9041%" y="133" width="0.4566%" height="15" fill="rgb(207,125,25)" fg:x="1083" fg:w="5"/><text x="99.1541%" y="143.50"></text></g><g><title>[libc.so.6] (5 samples, 0.46%)</title><rect x="98.9041%" y="117" width="0.4566%" height="15" fill="rgb(210,195,18)" fg:x="1083" fg:w="5"/><text x="99.1541%" y="127.50"></text></g><g><title>[libc.so.6] (4 samples, 0.37%)</title><rect x="98.9954%" y="101" width="0.3653%" height="15" fill="rgb(249,80,12)" fg:x="1084" fg:w="4"/><text x="99.2454%" y="111.50"></text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="99.6347%" y="261" width="0.0913%" height="15" fill="rgb(221,65,9)" fg:x="1091" fg:w="1"/><text x="99.8847%" y="271.50"></text></g><g><title>_start (1,035 samples, 94.52%)</title><rect x="5.2968%" y="613" width="94.5205%" height="15" fill="rgb(235,49,36)" fg:x="58" fg:w="1035"/><text x="5.5468%" y="623.50">_start</text></g><g><title>__libc_start_main (1,035 samples, 94.52%)</title><rect x="5.2968%" y="597" width="94.5205%" height="15" fill="rgb(225,32,20)" fg:x="58" fg:w="1035"/><text x="5.5468%" y="607.50">__libc_start_main</text></g><g><title>[libc.so.6] (1,035 samples, 94.52%)</title><rect x="5.2968%" y="581" width="94.5205%" height="15" fill="rgb(215,141,46)" fg:x="58" fg:w="1035"/><text x="5.5468%" y="591.50">[libc.so.6]</text></g><g><title>main (1,035 samples, 94.52%)</title><rect x="5.2968%" y="565" width="94.5205%" height="15" fill="rgb(250,160,47)" fg:x="58" fg:w="1035"/><text x="5.5468%" y="575.50">main</text></g><g><title>std::rt::lang_start_internal (1,035 samples, 94.52%)</title><rect x="5.2968%" y="549" width="94.5205%" height="15" fill="rgb(216,222,40)" fg:x="58" fg:w="1035"/><text x="5.5468%" y="559.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,035 samples, 94.52%)</title><rect x="5.2968%" y="533" width="94.5205%" height="15" fill="rgb(234,217,39)" fg:x="58" fg:w="1035"/><text x="5.5468%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,035 samples, 94.52%)</title><rect x="5.2968%" y="517" width="94.5205%" height="15" fill="rgb(207,178,40)" fg:x="58" fg:w="1035"/><text x="5.5468%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,035 samples, 94.52%)</title><rect x="5.2968%" y="501" width="94.5205%" height="15" fill="rgb(221,136,13)" fg:x="58" fg:w="1035"/><text x="5.5468%" y="511.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,035 samples, 94.52%)</title><rect x="5.2968%" y="485" width="94.5205%" height="15" fill="rgb(249,199,10)" fg:x="58" fg:w="1035"/><text x="5.5468%" y="495.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,035 samples, 94.52%)</title><rect x="5.2968%" y="469" width="94.5205%" height="15" fill="rgb(249,222,13)" fg:x="58" fg:w="1035"/><text x="5.5468%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,035 samples, 94.52%)</title><rect x="5.2968%" y="453" width="94.5205%" height="15" fill="rgb(244,185,38)" fg:x="58" fg:w="1035"/><text x="5.5468%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,035 samples, 94.52%)</title><rect x="5.2968%" y="437" width="94.5205%" height="15" fill="rgb(236,202,9)" fg:x="58" fg:w="1035"/><text x="5.5468%" y="447.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,035 samples, 94.52%)</title><rect x="5.2968%" y="421" width="94.5205%" height="15" fill="rgb(250,229,37)" fg:x="58" fg:w="1035"/><text x="5.5468%" y="431.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,035 samples, 94.52%)</title><rect x="5.2968%" y="405" width="94.5205%" height="15" fill="rgb(206,174,23)" fg:x="58" fg:w="1035"/><text x="5.5468%" y="415.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,035 samples, 94.52%)</title><rect x="5.2968%" y="389" width="94.5205%" height="15" fill="rgb(211,33,43)" fg:x="58" fg:w="1035"/><text x="5.5468%" y="399.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,035 samples, 94.52%)</title><rect x="5.2968%" y="373" width="94.5205%" height="15" fill="rgb(245,58,50)" fg:x="58" fg:w="1035"/><text x="5.5468%" y="383.50">core::ops::function::FnOnce::call_once</text></g><g><title>prueba::main (1,035 samples, 94.52%)</title><rect x="5.2968%" y="357" width="94.5205%" height="15" fill="rgb(244,68,36)" fg:x="58" fg:w="1035"/><text x="5.5468%" y="367.50">prueba::main</text></g><g><title>chess::perft::perft (1,003 samples, 91.60%)</title><rect x="8.2192%" y="341" width="91.5982%" height="15" fill="rgb(232,229,15)" fg:x="90" fg:w="1003"/><text x="8.4692%" y="351.50">chess::perft::perft</text></g><g><title>chess::perft::perft (1,003 samples, 91.60%)</title><rect x="8.2192%" y="325" width="91.5982%" height="15" fill="rgb(254,30,23)" fg:x="90" fg:w="1003"/><text x="8.4692%" y="335.50">chess::perft::perft</text></g><g><title>chess::perft::perft (1,003 samples, 91.60%)</title><rect x="8.2192%" y="309" width="91.5982%" height="15" fill="rgb(235,160,14)" fg:x="90" fg:w="1003"/><text x="8.4692%" y="319.50">chess::perft::perft</text></g><g><title>chess::perft::perft (999 samples, 91.23%)</title><rect x="8.5845%" y="293" width="91.2329%" height="15" fill="rgb(212,155,44)" fg:x="94" fg:w="999"/><text x="8.8345%" y="303.50">chess::perft::perft</text></g><g><title>chess::unmake::unmake_move (5 samples, 0.46%)</title><rect x="99.3607%" y="277" width="0.4566%" height="15" fill="rgb(226,2,50)" fg:x="1088" fg:w="5"/><text x="99.6107%" y="287.50"></text></g><g><title>chess::unmake::unmake_move (1 samples, 0.09%)</title><rect x="99.7260%" y="261" width="0.0913%" height="15" fill="rgb(234,177,6)" fg:x="1092" fg:w="1"/><text x="99.9760%" y="271.50"></text></g><g><title>chess::zobrist_hashing::HashingNumbers::hash_move (1 samples, 0.09%)</title><rect x="99.7260%" y="245" width="0.0913%" height="15" fill="rgb(217,24,9)" fg:x="1092" fg:w="1"/><text x="99.9760%" y="255.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="99.8174%" y="613" width="0.0913%" height="15" fill="rgb(220,13,46)" fg:x="1093" fg:w="1"/><text x="100.0674%" y="623.50"></text></g><g><title>all (1,095 samples, 100%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(239,221,27)" fg:x="0" fg:w="1095"/><text x="0.2500%" y="655.50"></text></g><g><title>prueba (1,095 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(222,198,25)" fg:x="0" fg:w="1095"/><text x="0.2500%" y="639.50">prueba</text></g><g><title>realloc (1 samples, 0.09%)</title><rect x="99.9087%" y="613" width="0.0913%" height="15" fill="rgb(211,99,13)" fg:x="1094" fg:w="1"/><text x="100.1587%" y="623.50"></text></g></svg></svg>
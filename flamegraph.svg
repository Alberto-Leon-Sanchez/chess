<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="694" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="677.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="677.00"> </text><svg id="frames" x="10" width="1180" total_samples="461"><g><title>[libc.so.6] (1 samples, 0.22%)</title><rect x="0.0000%" y="597" width="0.2169%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50"></text></g><g><title>[[heap]] (2 samples, 0.43%)</title><rect x="0.0000%" y="613" width="0.4338%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="623.50"></text></g><g><title>chess::make_move::make_move (1 samples, 0.22%)</title><rect x="0.2169%" y="597" width="0.2169%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.4669%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.22%)</title><rect x="0.4338%" y="597" width="0.2169%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.6838%" y="607.50"></text></g><g><title>chess::move_gen::pawn_moves (1 samples, 0.22%)</title><rect x="0.6508%" y="597" width="0.2169%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="1"/><text x="0.9008%" y="607.50"></text></g><g><title>chess::piece::PieceList::remove (1 samples, 0.22%)</title><rect x="0.8677%" y="597" width="0.2169%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="1"/><text x="1.1177%" y="607.50"></text></g><g><title>chess::unmake::unmake_move (1 samples, 0.22%)</title><rect x="1.0846%" y="597" width="0.2169%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="1"/><text x="1.3346%" y="607.50"></text></g><g><title>[[stack]] (5 samples, 1.08%)</title><rect x="0.4338%" y="613" width="1.0846%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="5"/><text x="0.6838%" y="623.50"></text></g><g><title>realloc (1 samples, 0.22%)</title><rect x="1.3015%" y="597" width="0.2169%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="1"/><text x="1.5515%" y="607.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 1.52%)</title><rect x="1.5184%" y="613" width="1.5184%" height="15" fill="rgb(220,122,19)" fg:x="7" fg:w="7"/><text x="1.7684%" y="623.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.43%)</title><rect x="2.6030%" y="597" width="0.4338%" height="15" fill="rgb(250,228,42)" fg:x="12" fg:w="2"/><text x="2.8530%" y="607.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.43%)</title><rect x="2.6030%" y="581" width="0.4338%" height="15" fill="rgb(240,193,28)" fg:x="12" fg:w="2"/><text x="2.8530%" y="591.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.43%)</title><rect x="2.6030%" y="565" width="0.4338%" height="15" fill="rgb(216,20,37)" fg:x="12" fg:w="2"/><text x="2.8530%" y="575.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.22%)</title><rect x="2.8200%" y="549" width="0.2169%" height="15" fill="rgb(206,188,39)" fg:x="13" fg:w="1"/><text x="3.0700%" y="559.50"></text></g><g><title>[libc.so.6] (1 samples, 0.22%)</title><rect x="3.0369%" y="613" width="0.2169%" height="15" fill="rgb(217,207,13)" fg:x="14" fg:w="1"/><text x="3.2869%" y="623.50"></text></g><g><title>[libc.so.6] (1 samples, 0.22%)</title><rect x="3.2538%" y="597" width="0.2169%" height="15" fill="rgb(231,73,38)" fg:x="15" fg:w="1"/><text x="3.5038%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.65%)</title><rect x="3.4707%" y="597" width="0.6508%" height="15" fill="rgb(225,20,46)" fg:x="16" fg:w="3"/><text x="3.7207%" y="607.50"></text></g><g><title>chess::attack_gen::attack_gen (1 samples, 0.22%)</title><rect x="4.1215%" y="597" width="0.2169%" height="15" fill="rgb(210,31,41)" fg:x="19" fg:w="1"/><text x="4.3715%" y="607.50"></text></g><g><title>chess::make_move::aux (10 samples, 2.17%)</title><rect x="4.3384%" y="597" width="2.1692%" height="15" fill="rgb(221,200,47)" fg:x="20" fg:w="10"/><text x="4.5884%" y="607.50">c..</text></g><g><title>chess::make_move::aux (2 samples, 0.43%)</title><rect x="6.0738%" y="581" width="0.4338%" height="15" fill="rgb(226,26,5)" fg:x="28" fg:w="2"/><text x="6.3238%" y="591.50"></text></g><g><title>chess::move_gen::direction_sliding (1 samples, 0.22%)</title><rect x="6.5076%" y="597" width="0.2169%" height="15" fill="rgb(249,33,26)" fg:x="30" fg:w="1"/><text x="6.7576%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (1 samples, 0.22%)</title><rect x="6.9414%" y="581" width="0.2169%" height="15" fill="rgb(235,183,28)" fg:x="32" fg:w="1"/><text x="7.1914%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.22%)</title><rect x="6.9414%" y="565" width="0.2169%" height="15" fill="rgb(221,5,38)" fg:x="32" fg:w="1"/><text x="7.1914%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.22%)</title><rect x="6.9414%" y="549" width="0.2169%" height="15" fill="rgb(247,18,42)" fg:x="32" fg:w="1"/><text x="7.1914%" y="559.50"></text></g><g><title>chess::move_gen::move_gen (3 samples, 0.65%)</title><rect x="6.7245%" y="597" width="0.6508%" height="15" fill="rgb(241,131,45)" fg:x="31" fg:w="3"/><text x="6.9745%" y="607.50"></text></g><g><title>chess::move_gen::get_pinned_pieces (1 samples, 0.22%)</title><rect x="7.1584%" y="581" width="0.2169%" height="15" fill="rgb(249,31,29)" fg:x="33" fg:w="1"/><text x="7.4084%" y="591.50"></text></g><g><title>chess::perft::perft (9 samples, 1.95%)</title><rect x="7.3753%" y="597" width="1.9523%" height="15" fill="rgb(225,111,53)" fg:x="34" fg:w="9"/><text x="7.6253%" y="607.50">c..</text></g><g><title>chess::piece::PieceList::make_move (1 samples, 0.22%)</title><rect x="9.3275%" y="597" width="0.2169%" height="15" fill="rgb(238,160,17)" fg:x="43" fg:w="1"/><text x="9.5775%" y="607.50"></text></g><g><title>chess::unmake::unmake_move (8 samples, 1.74%)</title><rect x="9.5445%" y="597" width="1.7354%" height="15" fill="rgb(214,148,48)" fg:x="44" fg:w="8"/><text x="9.7945%" y="607.50"></text></g><g><title>chess::unmake::unmake_move (2 samples, 0.43%)</title><rect x="10.8460%" y="581" width="0.4338%" height="15" fill="rgb(232,36,49)" fg:x="50" fg:w="2"/><text x="11.0960%" y="591.50"></text></g><g><title>[unknown] (38 samples, 8.24%)</title><rect x="3.2538%" y="613" width="8.2430%" height="15" fill="rgb(209,103,24)" fg:x="15" fg:w="38"/><text x="3.5038%" y="623.50">[unknown]</text></g><g><title>chess::zobrist_hashing::HashingNumbers::hash_move (1 samples, 0.22%)</title><rect x="11.2798%" y="597" width="0.2169%" height="15" fill="rgb(229,88,8)" fg:x="52" fg:w="1"/><text x="11.5298%" y="607.50"></text></g><g><title>chess::fen_reader::read_fen (10 samples, 2.17%)</title><rect x="11.4967%" y="341" width="2.1692%" height="15" fill="rgb(213,181,19)" fg:x="53" fg:w="10"/><text x="11.7467%" y="351.50">c..</text></g><g><title>alloc::vec::from_elem (10 samples, 2.17%)</title><rect x="11.4967%" y="325" width="2.1692%" height="15" fill="rgb(254,191,54)" fg:x="53" fg:w="10"/><text x="11.7467%" y="335.50">a..</text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (10 samples, 2.17%)</title><rect x="11.4967%" y="309" width="2.1692%" height="15" fill="rgb(241,83,37)" fg:x="53" fg:w="10"/><text x="11.7467%" y="319.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (10 samples, 2.17%)</title><rect x="11.4967%" y="293" width="2.1692%" height="15" fill="rgb(233,36,39)" fg:x="53" fg:w="10"/><text x="11.7467%" y="303.50">a..</text></g><g><title>core::ptr::write (10 samples, 2.17%)</title><rect x="11.4967%" y="277" width="2.1692%" height="15" fill="rgb(226,3,54)" fg:x="53" fg:w="10"/><text x="11.7467%" y="287.50">c..</text></g><g><title>chess::make_move::aux (1 samples, 0.22%)</title><rect x="13.6659%" y="293" width="0.2169%" height="15" fill="rgb(245,192,40)" fg:x="63" fg:w="1"/><text x="13.9159%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.22%)</title><rect x="14.5336%" y="277" width="0.2169%" height="15" fill="rgb(238,167,29)" fg:x="67" fg:w="1"/><text x="14.7836%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.22%)</title><rect x="14.5336%" y="261" width="0.2169%" height="15" fill="rgb(232,182,51)" fg:x="67" fg:w="1"/><text x="14.7836%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.22%)</title><rect x="14.5336%" y="245" width="0.2169%" height="15" fill="rgb(231,60,39)" fg:x="67" fg:w="1"/><text x="14.7836%" y="255.50"></text></g><g><title>chess::make_move::aux (1 samples, 0.22%)</title><rect x="15.1844%" y="261" width="0.2169%" height="15" fill="rgb(208,69,12)" fg:x="70" fg:w="1"/><text x="15.4344%" y="271.50"></text></g><g><title>chess::zobrist_hashing::HashingNumbers::hash_move (1 samples, 0.22%)</title><rect x="15.1844%" y="245" width="0.2169%" height="15" fill="rgb(235,93,37)" fg:x="70" fg:w="1"/><text x="15.4344%" y="255.50"></text></g><g><title>chess::make_move::update_game_state (1 samples, 0.22%)</title><rect x="15.4013%" y="261" width="0.2169%" height="15" fill="rgb(213,116,39)" fg:x="71" fg:w="1"/><text x="15.6513%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.22%)</title><rect x="15.4013%" y="245" width="0.2169%" height="15" fill="rgb(222,207,29)" fg:x="71" fg:w="1"/><text x="15.6513%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.22%)</title><rect x="15.8351%" y="245" width="0.2169%" height="15" fill="rgb(206,96,30)" fg:x="73" fg:w="1"/><text x="16.0851%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.22%)</title><rect x="15.8351%" y="229" width="0.2169%" height="15" fill="rgb(218,138,4)" fg:x="73" fg:w="1"/><text x="16.0851%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.22%)</title><rect x="15.8351%" y="213" width="0.2169%" height="15" fill="rgb(250,191,14)" fg:x="73" fg:w="1"/><text x="16.0851%" y="223.50"></text></g><g><title>chess::make_move::aux (7 samples, 1.52%)</title><rect x="14.7505%" y="277" width="1.5184%" height="15" fill="rgb(239,60,40)" fg:x="68" fg:w="7"/><text x="15.0005%" y="287.50"></text></g><g><title>chess::piece::PieceList::make_move (3 samples, 0.65%)</title><rect x="15.6182%" y="261" width="0.6508%" height="15" fill="rgb(206,27,48)" fg:x="72" fg:w="3"/><text x="15.8682%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.22%)</title><rect x="16.0521%" y="245" width="0.2169%" height="15" fill="rgb(225,35,8)" fg:x="74" fg:w="1"/><text x="16.3021%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.22%)</title><rect x="16.0521%" y="229" width="0.2169%" height="15" fill="rgb(250,213,24)" fg:x="74" fg:w="1"/><text x="16.3021%" y="239.50"></text></g><g><title>chess::move_gen::direction_sliding (2 samples, 0.43%)</title><rect x="16.2690%" y="261" width="0.4338%" height="15" fill="rgb(247,123,22)" fg:x="75" fg:w="2"/><text x="16.5190%" y="271.50"></text></g><g><title>chess::move_gen::direction_sliding (1 samples, 0.22%)</title><rect x="16.4859%" y="245" width="0.2169%" height="15" fill="rgb(231,138,38)" fg:x="76" fg:w="1"/><text x="16.7359%" y="255.50"></text></g><g><title>chess::move_gen::get_pinned_pieces (1 samples, 0.22%)</title><rect x="16.7028%" y="261" width="0.2169%" height="15" fill="rgb(231,145,46)" fg:x="77" fg:w="1"/><text x="16.9528%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.22%)</title><rect x="16.7028%" y="245" width="0.2169%" height="15" fill="rgb(251,118,11)" fg:x="77" fg:w="1"/><text x="16.9528%" y="255.50"></text></g><g><title>chess::move_gen::knight_moves (1 samples, 0.22%)</title><rect x="16.9197%" y="261" width="0.2169%" height="15" fill="rgb(217,147,25)" fg:x="78" fg:w="1"/><text x="17.1697%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.22%)</title><rect x="16.9197%" y="245" width="0.2169%" height="15" fill="rgb(247,81,37)" fg:x="78" fg:w="1"/><text x="17.1697%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.22%)</title><rect x="16.9197%" y="229" width="0.2169%" height="15" fill="rgb(209,12,38)" fg:x="78" fg:w="1"/><text x="17.1697%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.22%)</title><rect x="16.9197%" y="213" width="0.2169%" height="15" fill="rgb(227,1,9)" fg:x="78" fg:w="1"/><text x="17.1697%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.22%)</title><rect x="16.9197%" y="197" width="0.2169%" height="15" fill="rgb(248,47,43)" fg:x="78" fg:w="1"/><text x="17.1697%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.22%)</title><rect x="16.9197%" y="181" width="0.2169%" height="15" fill="rgb(221,10,30)" fg:x="78" fg:w="1"/><text x="17.1697%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.22%)</title><rect x="16.9197%" y="165" width="0.2169%" height="15" fill="rgb(210,229,1)" fg:x="78" fg:w="1"/><text x="17.1697%" y="175.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.22%)</title><rect x="16.9197%" y="149" width="0.2169%" height="15" fill="rgb(222,148,37)" fg:x="78" fg:w="1"/><text x="17.1697%" y="159.50"></text></g><g><title>realloc (1 samples, 0.22%)</title><rect x="16.9197%" y="133" width="0.2169%" height="15" fill="rgb(234,67,33)" fg:x="78" fg:w="1"/><text x="17.1697%" y="143.50"></text></g><g><title>[libc.so.6] (1 samples, 0.22%)</title><rect x="16.9197%" y="117" width="0.2169%" height="15" fill="rgb(247,98,35)" fg:x="78" fg:w="1"/><text x="17.1697%" y="127.50"></text></g><g><title>chess::move_gen::pawn_moves (2 samples, 0.43%)</title><rect x="17.1367%" y="261" width="0.4338%" height="15" fill="rgb(247,138,52)" fg:x="79" fg:w="2"/><text x="17.3867%" y="271.50"></text></g><g><title>chess::move_gen::move_gen (7 samples, 1.52%)</title><rect x="16.2690%" y="277" width="1.5184%" height="15" fill="rgb(213,79,30)" fg:x="75" fg:w="7"/><text x="16.5190%" y="287.50"></text></g><g><title>chess::piece::PieceList::add (1 samples, 0.22%)</title><rect x="17.5705%" y="261" width="0.2169%" height="15" fill="rgb(246,177,23)" fg:x="81" fg:w="1"/><text x="17.8205%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.22%)</title><rect x="23.2104%" y="261" width="0.2169%" height="15" fill="rgb(230,62,27)" fg:x="107" fg:w="1"/><text x="23.4604%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.22%)</title><rect x="23.2104%" y="245" width="0.2169%" height="15" fill="rgb(216,154,8)" fg:x="107" fg:w="1"/><text x="23.4604%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.22%)</title><rect x="23.2104%" y="229" width="0.2169%" height="15" fill="rgb(244,35,45)" fg:x="107" fg:w="1"/><text x="23.4604%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3 samples, 0.65%)</title><rect x="23.4273%" y="261" width="0.6508%" height="15" fill="rgb(251,115,12)" fg:x="108" fg:w="3"/><text x="23.6773%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (3 samples, 0.65%)</title><rect x="23.4273%" y="245" width="0.6508%" height="15" fill="rgb(240,54,50)" fg:x="108" fg:w="3"/><text x="23.6773%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.43%)</title><rect x="23.6443%" y="229" width="0.4338%" height="15" fill="rgb(233,84,52)" fg:x="109" fg:w="2"/><text x="23.8943%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.22%)</title><rect x="24.0781%" y="261" width="0.2169%" height="15" fill="rgb(207,117,47)" fg:x="111" fg:w="1"/><text x="24.3281%" y="271.50"></text></g><g><title>chess::make_move::aux (32 samples, 6.94%)</title><rect x="26.0304%" y="245" width="6.9414%" height="15" fill="rgb(249,43,39)" fg:x="120" fg:w="32"/><text x="26.2804%" y="255.50">chess::ma..</text></g><g><title>chess::zobrist_hashing::HashingNumbers::hash_move (27 samples, 5.86%)</title><rect x="27.1150%" y="229" width="5.8568%" height="15" fill="rgb(209,38,44)" fg:x="125" fg:w="27"/><text x="27.3650%" y="239.50">chess::..</text></g><g><title>&lt;&amp;u8 as core::ops::arith::Add&lt;u8&gt;&gt;::add (1 samples, 0.22%)</title><rect x="36.0087%" y="229" width="0.2169%" height="15" fill="rgb(236,212,23)" fg:x="166" fg:w="1"/><text x="36.2587%" y="239.50"></text></g><g><title>&lt;u8 as core::ops::arith::Add&gt;::add (1 samples, 0.22%)</title><rect x="36.0087%" y="213" width="0.2169%" height="15" fill="rgb(242,79,21)" fg:x="166" fg:w="1"/><text x="36.2587%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (13 samples, 2.82%)</title><rect x="36.2256%" y="229" width="2.8200%" height="15" fill="rgb(211,96,35)" fg:x="167" fg:w="13"/><text x="36.4756%" y="239.50">al..</text></g><g><title>core::ptr::write (5 samples, 1.08%)</title><rect x="37.9610%" y="213" width="1.0846%" height="15" fill="rgb(253,215,40)" fg:x="175" fg:w="5"/><text x="38.2110%" y="223.50"></text></g><g><title>chess::make_move::aux (1 samples, 0.22%)</title><rect x="39.0456%" y="229" width="0.2169%" height="15" fill="rgb(211,81,21)" fg:x="180" fg:w="1"/><text x="39.2956%" y="239.50"></text></g><g><title>chess::zobrist_hashing::Hash::hash_castling (2 samples, 0.43%)</title><rect x="39.2625%" y="229" width="0.4338%" height="15" fill="rgb(208,190,38)" fg:x="181" fg:w="2"/><text x="39.5125%" y="239.50"></text></g><g><title>chess::zobrist_hashing::Hash::hash_en_passant (5 samples, 1.08%)</title><rect x="39.6963%" y="229" width="1.0846%" height="15" fill="rgb(235,213,38)" fg:x="183" fg:w="5"/><text x="39.9463%" y="239.50"></text></g><g><title>core::num::&lt;impl i8&gt;::abs (1 samples, 0.22%)</title><rect x="40.7809%" y="229" width="0.2169%" height="15" fill="rgb(237,122,38)" fg:x="188" fg:w="1"/><text x="41.0309%" y="239.50"></text></g><g><title>chess::make_move::update_game_state (38 samples, 8.24%)</title><rect x="32.9718%" y="245" width="8.2430%" height="15" fill="rgb(244,218,35)" fg:x="152" fg:w="38"/><text x="33.2218%" y="255.50">chess::make..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.22%)</title><rect x="40.9978%" y="229" width="0.2169%" height="15" fill="rgb(240,68,47)" fg:x="189" fg:w="1"/><text x="41.2478%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (4 samples, 0.87%)</title><rect x="43.1670%" y="229" width="0.8677%" height="15" fill="rgb(210,16,53)" fg:x="199" fg:w="4"/><text x="43.4170%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (4 samples, 0.87%)</title><rect x="43.1670%" y="213" width="0.8677%" height="15" fill="rgb(235,124,12)" fg:x="199" fg:w="4"/><text x="43.4170%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (4 samples, 0.87%)</title><rect x="43.1670%" y="197" width="0.8677%" height="15" fill="rgb(224,169,11)" fg:x="199" fg:w="4"/><text x="43.4170%" y="207.50"></text></g><g><title>chess::piece::PieceList::make_move (17 samples, 3.69%)</title><rect x="41.2148%" y="245" width="3.6876%" height="15" fill="rgb(250,166,2)" fg:x="190" fg:w="17"/><text x="41.4648%" y="255.50">ches..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.87%)</title><rect x="44.0347%" y="229" width="0.8677%" height="15" fill="rgb(242,216,29)" fg:x="203" fg:w="4"/><text x="44.2847%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.87%)</title><rect x="44.0347%" y="213" width="0.8677%" height="15" fill="rgb(230,116,27)" fg:x="203" fg:w="4"/><text x="44.2847%" y="223.50"></text></g><g><title>chess::zobrist_hashing::Hash::hash_move (15 samples, 3.25%)</title><rect x="44.9024%" y="245" width="3.2538%" height="15" fill="rgb(228,99,48)" fg:x="207" fg:w="15"/><text x="45.1524%" y="255.50">che..</text></g><g><title>chess::api::board120_to_board64 (15 samples, 3.25%)</title><rect x="44.9024%" y="229" width="3.2538%" height="15" fill="rgb(253,11,6)" fg:x="207" fg:w="15"/><text x="45.1524%" y="239.50">che..</text></g><g><title>chess::make_move::aux (111 samples, 24.08%)</title><rect x="24.2950%" y="261" width="24.0781%" height="15" fill="rgb(247,143,39)" fg:x="112" fg:w="111"/><text x="24.5450%" y="271.50">chess::make_move::aux</text></g><g><title>core::slice::&lt;impl [T]&gt;::last (1 samples, 0.22%)</title><rect x="48.1562%" y="245" width="0.2169%" height="15" fill="rgb(236,97,10)" fg:x="222" fg:w="1"/><text x="48.4062%" y="255.50"></text></g><g><title>chess::make_move::make_move (3 samples, 0.65%)</title><rect x="48.3731%" y="261" width="0.6508%" height="15" fill="rgb(233,208,19)" fg:x="223" fg:w="3"/><text x="48.6231%" y="271.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.43%)</title><rect x="49.2408%" y="149" width="0.4338%" height="15" fill="rgb(216,164,2)" fg:x="227" fg:w="2"/><text x="49.4908%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.22%)</title><rect x="49.6746%" y="149" width="0.2169%" height="15" fill="rgb(220,129,5)" fg:x="229" fg:w="1"/><text x="49.9246%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (9 samples, 1.95%)</title><rect x="50.1085%" y="133" width="1.9523%" height="15" fill="rgb(242,17,10)" fg:x="231" fg:w="9"/><text x="50.3585%" y="143.50">&lt;..</text></g><g><title>alloc::alloc::Global::grow_impl (9 samples, 1.95%)</title><rect x="50.1085%" y="117" width="1.9523%" height="15" fill="rgb(242,107,0)" fg:x="231" fg:w="9"/><text x="50.3585%" y="127.50">a..</text></g><g><title>alloc::alloc::realloc (9 samples, 1.95%)</title><rect x="50.1085%" y="101" width="1.9523%" height="15" fill="rgb(251,28,31)" fg:x="231" fg:w="9"/><text x="50.3585%" y="111.50">a..</text></g><g><title>realloc (9 samples, 1.95%)</title><rect x="50.1085%" y="85" width="1.9523%" height="15" fill="rgb(233,223,10)" fg:x="231" fg:w="9"/><text x="50.3585%" y="95.50">r..</text></g><g><title>[libc.so.6] (8 samples, 1.74%)</title><rect x="50.3254%" y="69" width="1.7354%" height="15" fill="rgb(215,21,27)" fg:x="232" fg:w="8"/><text x="50.5754%" y="79.50"></text></g><g><title>[libc.so.6] (6 samples, 1.30%)</title><rect x="50.7592%" y="53" width="1.3015%" height="15" fill="rgb(232,23,21)" fg:x="234" fg:w="6"/><text x="51.0092%" y="63.50"></text></g><g><title>[libc.so.6] (1 samples, 0.22%)</title><rect x="51.8438%" y="37" width="0.2169%" height="15" fill="rgb(244,5,23)" fg:x="239" fg:w="1"/><text x="52.0938%" y="47.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 2.39%)</title><rect x="49.8915%" y="149" width="2.3861%" height="15" fill="rgb(226,81,46)" fg:x="230" fg:w="11"/><text x="50.1415%" y="159.50">al..</text></g><g><title>__rdl_alloc (1 samples, 0.22%)</title><rect x="52.0607%" y="133" width="0.2169%" height="15" fill="rgb(247,70,30)" fg:x="240" fg:w="1"/><text x="52.3107%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.22%)</title><rect x="52.0607%" y="117" width="0.2169%" height="15" fill="rgb(212,68,19)" fg:x="240" fg:w="1"/><text x="52.3107%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (16 samples, 3.47%)</title><rect x="49.0239%" y="213" width="3.4707%" height="15" fill="rgb(240,187,13)" fg:x="226" fg:w="16"/><text x="49.2739%" y="223.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (16 samples, 3.47%)</title><rect x="49.0239%" y="197" width="3.4707%" height="15" fill="rgb(223,113,26)" fg:x="226" fg:w="16"/><text x="49.2739%" y="207.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (16 samples, 3.47%)</title><rect x="49.0239%" y="181" width="3.4707%" height="15" fill="rgb(206,192,2)" fg:x="226" fg:w="16"/><text x="49.2739%" y="191.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (16 samples, 3.47%)</title><rect x="49.0239%" y="165" width="3.4707%" height="15" fill="rgb(241,108,4)" fg:x="226" fg:w="16"/><text x="49.2739%" y="175.50">all..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.22%)</title><rect x="52.2777%" y="149" width="0.2169%" height="15" fill="rgb(247,173,49)" fg:x="241" fg:w="1"/><text x="52.5277%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.22%)</title><rect x="52.2777%" y="133" width="0.2169%" height="15" fill="rgb(224,114,35)" fg:x="241" fg:w="1"/><text x="52.5277%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (19 samples, 4.12%)</title><rect x="49.0239%" y="245" width="4.1215%" height="15" fill="rgb(245,159,27)" fg:x="226" fg:w="19"/><text x="49.2739%" y="255.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (19 samples, 4.12%)</title><rect x="49.0239%" y="229" width="4.1215%" height="15" fill="rgb(245,172,44)" fg:x="226" fg:w="19"/><text x="49.2739%" y="239.50">allo..</text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.65%)</title><rect x="52.4946%" y="213" width="0.6508%" height="15" fill="rgb(236,23,11)" fg:x="242" fg:w="3"/><text x="52.7446%" y="223.50"></text></g><g><title>[libc.so.6] (2 samples, 0.43%)</title><rect x="52.7115%" y="197" width="0.4338%" height="15" fill="rgb(205,117,38)" fg:x="243" fg:w="2"/><text x="52.9615%" y="207.50"></text></g><g><title>chess::attack_gen::attack_gen (1 samples, 0.22%)</title><rect x="53.3623%" y="229" width="0.2169%" height="15" fill="rgb(237,72,25)" fg:x="246" fg:w="1"/><text x="53.6123%" y="239.50"></text></g><g><title>chess::attack_gen::direction_sliding (10 samples, 2.17%)</title><rect x="53.5792%" y="229" width="2.1692%" height="15" fill="rgb(244,70,9)" fg:x="247" fg:w="10"/><text x="53.8292%" y="239.50">c..</text></g><g><title>chess::attack_gen::king_moves (3 samples, 0.65%)</title><rect x="55.7484%" y="229" width="0.6508%" height="15" fill="rgb(217,125,39)" fg:x="257" fg:w="3"/><text x="55.9984%" y="239.50"></text></g><g><title>chess::attack_gen::knight_moves (2 samples, 0.43%)</title><rect x="56.3991%" y="229" width="0.4338%" height="15" fill="rgb(235,36,10)" fg:x="260" fg:w="2"/><text x="56.6491%" y="239.50"></text></g><g><title>chess::attack_gen::pawn_moves (8 samples, 1.74%)</title><rect x="56.8330%" y="229" width="1.7354%" height="15" fill="rgb(251,123,47)" fg:x="262" fg:w="8"/><text x="57.0830%" y="239.50"></text></g><g><title>chess::attack_gen::attack_gen (26 samples, 5.64%)</title><rect x="53.1453%" y="245" width="5.6399%" height="15" fill="rgb(221,13,13)" fg:x="245" fg:w="26"/><text x="53.3953%" y="255.50">chess::..</text></g><g><title>core::slice::&lt;impl [T]&gt;::last (1 samples, 0.22%)</title><rect x="58.5683%" y="229" width="0.2169%" height="15" fill="rgb(238,131,9)" fg:x="270" fg:w="1"/><text x="58.8183%" y="239.50"></text></g><g><title>&lt;i8 as core::ops::arith::Add&lt;&amp;i8&gt;&gt;::add (2 samples, 0.43%)</title><rect x="60.9544%" y="229" width="0.4338%" height="15" fill="rgb(211,50,8)" fg:x="281" fg:w="2"/><text x="61.2044%" y="239.50"></text></g><g><title>&lt;i8 as core::ops::arith::Add&gt;::add (2 samples, 0.43%)</title><rect x="60.9544%" y="213" width="0.4338%" height="15" fill="rgb(245,182,24)" fg:x="281" fg:w="2"/><text x="61.2044%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.43%)</title><rect x="61.3883%" y="165" width="0.4338%" height="15" fill="rgb(242,14,37)" fg:x="283" fg:w="2"/><text x="61.6383%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.43%)</title><rect x="61.3883%" y="149" width="0.4338%" height="15" fill="rgb(246,228,12)" fg:x="283" fg:w="2"/><text x="61.6383%" y="159.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.43%)</title><rect x="61.3883%" y="133" width="0.4338%" height="15" fill="rgb(213,55,15)" fg:x="283" fg:w="2"/><text x="61.6383%" y="143.50"></text></g><g><title>realloc (2 samples, 0.43%)</title><rect x="61.3883%" y="117" width="0.4338%" height="15" fill="rgb(209,9,3)" fg:x="283" fg:w="2"/><text x="61.6383%" y="127.50"></text></g><g><title>[libc.so.6] (2 samples, 0.43%)</title><rect x="61.3883%" y="101" width="0.4338%" height="15" fill="rgb(230,59,30)" fg:x="283" fg:w="2"/><text x="61.6383%" y="111.50"></text></g><g><title>[libc.so.6] (1 samples, 0.22%)</title><rect x="61.6052%" y="85" width="0.2169%" height="15" fill="rgb(209,121,21)" fg:x="284" fg:w="1"/><text x="61.8552%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.65%)</title><rect x="61.3883%" y="181" width="0.6508%" height="15" fill="rgb(220,109,13)" fg:x="283" fg:w="3"/><text x="61.6383%" y="191.50"></text></g><g><title>__rust_alloc (1 samples, 0.22%)</title><rect x="61.8221%" y="165" width="0.2169%" height="15" fill="rgb(232,18,1)" fg:x="285" fg:w="1"/><text x="62.0721%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.87%)</title><rect x="61.3883%" y="229" width="0.8677%" height="15" fill="rgb(215,41,42)" fg:x="283" fg:w="4"/><text x="61.6383%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.87%)</title><rect x="61.3883%" y="213" width="0.8677%" height="15" fill="rgb(224,123,36)" fg:x="283" fg:w="4"/><text x="61.6383%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.87%)</title><rect x="61.3883%" y="197" width="0.8677%" height="15" fill="rgb(240,125,3)" fg:x="283" fg:w="4"/><text x="61.6383%" y="207.50"></text></g><g><title>core::cmp::max (1 samples, 0.22%)</title><rect x="62.0390%" y="181" width="0.2169%" height="15" fill="rgb(205,98,50)" fg:x="286" fg:w="1"/><text x="62.2890%" y="191.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.22%)</title><rect x="62.0390%" y="165" width="0.2169%" height="15" fill="rgb(205,185,37)" fg:x="286" fg:w="1"/><text x="62.2890%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.22%)</title><rect x="62.0390%" y="149" width="0.2169%" height="15" fill="rgb(238,207,15)" fg:x="286" fg:w="1"/><text x="62.2890%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (1 samples, 0.22%)</title><rect x="62.2560%" y="229" width="0.2169%" height="15" fill="rgb(213,199,42)" fg:x="287" fg:w="1"/><text x="62.5060%" y="239.50"></text></g><g><title>chess::move_gen::direction_sliding (21 samples, 4.56%)</title><rect x="58.7852%" y="245" width="4.5553%" height="15" fill="rgb(235,201,11)" fg:x="271" fg:w="21"/><text x="59.0352%" y="255.50">chess..</text></g><g><title>chess::move_gen::direction_sliding (4 samples, 0.87%)</title><rect x="62.4729%" y="229" width="0.8677%" height="15" fill="rgb(207,46,11)" fg:x="288" fg:w="4"/><text x="62.7229%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.22%)</title><rect x="65.0759%" y="229" width="0.2169%" height="15" fill="rgb(241,35,35)" fg:x="300" fg:w="1"/><text x="65.3259%" y="239.50"></text></g><g><title>&lt;i8 as core::ops::arith::Add&lt;&amp;i8&gt;&gt;::add (1 samples, 0.22%)</title><rect x="65.2928%" y="229" width="0.2169%" height="15" fill="rgb(243,32,47)" fg:x="301" fg:w="1"/><text x="65.5428%" y="239.50"></text></g><g><title>&lt;i8 as core::ops::arith::Add&gt;::add (1 samples, 0.22%)</title><rect x="65.2928%" y="213" width="0.2169%" height="15" fill="rgb(247,202,23)" fg:x="301" fg:w="1"/><text x="65.5428%" y="223.50"></text></g><g><title>[libc.so.6] (8 samples, 1.74%)</title><rect x="65.5098%" y="229" width="1.7354%" height="15" fill="rgb(219,102,11)" fg:x="302" fg:w="8"/><text x="65.7598%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (1 samples, 0.22%)</title><rect x="67.2451%" y="229" width="0.2169%" height="15" fill="rgb(243,110,44)" fg:x="310" fg:w="1"/><text x="67.4951%" y="239.50"></text></g><g><title>chess::move_gen::get_pinned_pieces (21 samples, 4.56%)</title><rect x="63.3406%" y="245" width="4.5553%" height="15" fill="rgb(222,74,54)" fg:x="292" fg:w="21"/><text x="63.5906%" y="255.50">chess..</text></g><g><title>chess::move_gen::move_gen (2 samples, 0.43%)</title><rect x="67.4620%" y="229" width="0.4338%" height="15" fill="rgb(216,99,12)" fg:x="311" fg:w="2"/><text x="67.7120%" y="239.50"></text></g><g><title>chess::move_gen::king_moves (3 samples, 0.65%)</title><rect x="67.8959%" y="245" width="0.6508%" height="15" fill="rgb(226,22,26)" fg:x="313" fg:w="3"/><text x="68.1459%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.22%)</title><rect x="68.3297%" y="229" width="0.2169%" height="15" fill="rgb(217,163,10)" fg:x="315" fg:w="1"/><text x="68.5797%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.22%)</title><rect x="68.3297%" y="213" width="0.2169%" height="15" fill="rgb(213,25,53)" fg:x="315" fg:w="1"/><text x="68.5797%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.22%)</title><rect x="68.3297%" y="197" width="0.2169%" height="15" fill="rgb(252,105,26)" fg:x="315" fg:w="1"/><text x="68.5797%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.22%)</title><rect x="68.3297%" y="181" width="0.2169%" height="15" fill="rgb(220,39,43)" fg:x="315" fg:w="1"/><text x="68.5797%" y="191.50"></text></g><g><title>malloc (1 samples, 0.22%)</title><rect x="68.3297%" y="165" width="0.2169%" height="15" fill="rgb(229,68,48)" fg:x="315" fg:w="1"/><text x="68.5797%" y="175.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.22%)</title><rect x="69.8482%" y="229" width="0.2169%" height="15" fill="rgb(252,8,32)" fg:x="322" fg:w="1"/><text x="70.0982%" y="239.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.22%)</title><rect x="69.8482%" y="213" width="0.2169%" height="15" fill="rgb(223,20,43)" fg:x="322" fg:w="1"/><text x="70.0982%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.22%)</title><rect x="69.8482%" y="197" width="0.2169%" height="15" fill="rgb(229,81,49)" fg:x="322" fg:w="1"/><text x="70.0982%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.22%)</title><rect x="69.8482%" y="181" width="0.2169%" height="15" fill="rgb(236,28,36)" fg:x="322" fg:w="1"/><text x="70.0982%" y="191.50"></text></g><g><title>__rust_realloc (1 samples, 0.22%)</title><rect x="70.0651%" y="117" width="0.2169%" height="15" fill="rgb(249,185,26)" fg:x="323" fg:w="1"/><text x="70.3151%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.65%)</title><rect x="70.0651%" y="229" width="0.6508%" height="15" fill="rgb(249,174,33)" fg:x="323" fg:w="3"/><text x="70.3151%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.65%)</title><rect x="70.0651%" y="213" width="0.6508%" height="15" fill="rgb(233,201,37)" fg:x="323" fg:w="3"/><text x="70.3151%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.65%)</title><rect x="70.0651%" y="197" width="0.6508%" height="15" fill="rgb(221,78,26)" fg:x="323" fg:w="3"/><text x="70.3151%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.65%)</title><rect x="70.0651%" y="181" width="0.6508%" height="15" fill="rgb(250,127,30)" fg:x="323" fg:w="3"/><text x="70.3151%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.65%)</title><rect x="70.0651%" y="165" width="0.6508%" height="15" fill="rgb(230,49,44)" fg:x="323" fg:w="3"/><text x="70.3151%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.65%)</title><rect x="70.0651%" y="149" width="0.6508%" height="15" fill="rgb(229,67,23)" fg:x="323" fg:w="3"/><text x="70.3151%" y="159.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.65%)</title><rect x="70.0651%" y="133" width="0.6508%" height="15" fill="rgb(249,83,47)" fg:x="323" fg:w="3"/><text x="70.3151%" y="143.50"></text></g><g><title>realloc (2 samples, 0.43%)</title><rect x="70.2820%" y="117" width="0.4338%" height="15" fill="rgb(215,43,3)" fg:x="324" fg:w="2"/><text x="70.5320%" y="127.50"></text></g><g><title>[libc.so.6] (2 samples, 0.43%)</title><rect x="70.2820%" y="101" width="0.4338%" height="15" fill="rgb(238,154,13)" fg:x="324" fg:w="2"/><text x="70.5320%" y="111.50"></text></g><g><title>[libc.so.6] (2 samples, 0.43%)</title><rect x="70.2820%" y="85" width="0.4338%" height="15" fill="rgb(219,56,2)" fg:x="324" fg:w="2"/><text x="70.5320%" y="95.50"></text></g><g><title>chess::move_gen::knight_moves (11 samples, 2.39%)</title><rect x="68.5466%" y="245" width="2.3861%" height="15" fill="rgb(233,0,4)" fg:x="316" fg:w="11"/><text x="68.7966%" y="255.50">ch..</text></g><g><title>chess::move_gen::knight_moves (1 samples, 0.22%)</title><rect x="70.7158%" y="229" width="0.2169%" height="15" fill="rgb(235,30,7)" fg:x="326" fg:w="1"/><text x="70.9658%" y="239.50"></text></g><g><title>chess::move_gen::move_gen (4 samples, 0.87%)</title><rect x="70.9328%" y="245" width="0.8677%" height="15" fill="rgb(250,79,13)" fg:x="327" fg:w="4"/><text x="71.1828%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.22%)</title><rect x="73.5358%" y="181" width="0.2169%" height="15" fill="rgb(211,146,34)" fg:x="339" fg:w="1"/><text x="73.7858%" y="191.50"></text></g><g><title>__rdl_realloc (1 samples, 0.22%)</title><rect x="73.9696%" y="117" width="0.2169%" height="15" fill="rgb(228,22,38)" fg:x="341" fg:w="1"/><text x="74.2196%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.22%)</title><rect x="73.9696%" y="101" width="0.2169%" height="15" fill="rgb(235,168,5)" fg:x="341" fg:w="1"/><text x="74.2196%" y="111.50"></text></g><g><title>__rust_realloc (1 samples, 0.22%)</title><rect x="74.1866%" y="117" width="0.2169%" height="15" fill="rgb(221,155,16)" fg:x="342" fg:w="1"/><text x="74.4366%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (12 samples, 2.60%)</title><rect x="73.9696%" y="165" width="2.6030%" height="15" fill="rgb(215,215,53)" fg:x="341" fg:w="12"/><text x="74.2196%" y="175.50">&lt;a..</text></g><g><title>alloc::alloc::Global::grow_impl (12 samples, 2.60%)</title><rect x="73.9696%" y="149" width="2.6030%" height="15" fill="rgb(223,4,10)" fg:x="341" fg:w="12"/><text x="74.2196%" y="159.50">al..</text></g><g><title>alloc::alloc::realloc (12 samples, 2.60%)</title><rect x="73.9696%" y="133" width="2.6030%" height="15" fill="rgb(234,103,6)" fg:x="341" fg:w="12"/><text x="74.2196%" y="143.50">al..</text></g><g><title>realloc (10 samples, 2.17%)</title><rect x="74.4035%" y="117" width="2.1692%" height="15" fill="rgb(227,97,0)" fg:x="343" fg:w="10"/><text x="74.6535%" y="127.50">r..</text></g><g><title>[libc.so.6] (10 samples, 2.17%)</title><rect x="74.4035%" y="101" width="2.1692%" height="15" fill="rgb(234,150,53)" fg:x="343" fg:w="10"/><text x="74.6535%" y="111.50">[..</text></g><g><title>[libc.so.6] (9 samples, 1.95%)</title><rect x="74.6204%" y="85" width="1.9523%" height="15" fill="rgb(228,201,54)" fg:x="344" fg:w="9"/><text x="74.8704%" y="95.50">[..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.22%)</title><rect x="76.5727%" y="165" width="0.2169%" height="15" fill="rgb(222,22,37)" fg:x="353" fg:w="1"/><text x="76.8227%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (16 samples, 3.47%)</title><rect x="73.7527%" y="181" width="3.4707%" height="15" fill="rgb(237,53,32)" fg:x="340" fg:w="16"/><text x="74.0027%" y="191.50">all..</text></g><g><title>malloc (2 samples, 0.43%)</title><rect x="76.7896%" y="165" width="0.4338%" height="15" fill="rgb(233,25,53)" fg:x="354" fg:w="2"/><text x="77.0396%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (18 samples, 3.90%)</title><rect x="73.5358%" y="213" width="3.9046%" height="15" fill="rgb(210,40,34)" fg:x="339" fg:w="18"/><text x="73.7858%" y="223.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (18 samples, 3.90%)</title><rect x="73.5358%" y="197" width="3.9046%" height="15" fill="rgb(241,220,44)" fg:x="339" fg:w="18"/><text x="73.7858%" y="207.50">allo..</text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.22%)</title><rect x="77.2234%" y="181" width="0.2169%" height="15" fill="rgb(235,28,35)" fg:x="356" fg:w="1"/><text x="77.4734%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.22%)</title><rect x="77.2234%" y="165" width="0.2169%" height="15" fill="rgb(210,56,17)" fg:x="356" fg:w="1"/><text x="77.4734%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.22%)</title><rect x="77.2234%" y="149" width="0.2169%" height="15" fill="rgb(224,130,29)" fg:x="356" fg:w="1"/><text x="77.4734%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (20 samples, 4.34%)</title><rect x="73.5358%" y="229" width="4.3384%" height="15" fill="rgb(235,212,8)" fg:x="339" fg:w="20"/><text x="73.7858%" y="239.50">alloc..</text></g><g><title>core::ptr::write (2 samples, 0.43%)</title><rect x="77.4403%" y="213" width="0.4338%" height="15" fill="rgb(223,33,50)" fg:x="357" fg:w="2"/><text x="77.6903%" y="223.50"></text></g><g><title>chess::attack_gen::direction_sliding (6 samples, 1.30%)</title><rect x="78.0911%" y="213" width="1.3015%" height="15" fill="rgb(219,149,13)" fg:x="360" fg:w="6"/><text x="78.3411%" y="223.50"></text></g><g><title>chess::move_gen::discover_check (8 samples, 1.74%)</title><rect x="77.8742%" y="229" width="1.7354%" height="15" fill="rgb(250,156,29)" fg:x="359" fg:w="8"/><text x="78.1242%" y="239.50"></text></g><g><title>chess::move_gen::discover_check (1 samples, 0.22%)</title><rect x="79.3926%" y="213" width="0.2169%" height="15" fill="rgb(216,193,19)" fg:x="366" fg:w="1"/><text x="79.6426%" y="223.50"></text></g><g><title>chess::move_gen::pawn_moves (37 samples, 8.03%)</title><rect x="71.8004%" y="245" width="8.0260%" height="15" fill="rgb(216,135,14)" fg:x="331" fg:w="37"/><text x="72.0504%" y="255.50">chess::move..</text></g><g><title>chess::move_gen::pawn_moves (1 samples, 0.22%)</title><rect x="79.6095%" y="229" width="0.2169%" height="15" fill="rgb(241,47,5)" fg:x="367" fg:w="1"/><text x="79.8595%" y="239.50"></text></g><g><title>chess::piece::PieceList::add (2 samples, 0.43%)</title><rect x="79.8265%" y="245" width="0.4338%" height="15" fill="rgb(233,42,35)" fg:x="368" fg:w="2"/><text x="80.0765%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.22%)</title><rect x="80.0434%" y="229" width="0.2169%" height="15" fill="rgb(231,13,6)" fg:x="369" fg:w="1"/><text x="80.2934%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.22%)</title><rect x="80.0434%" y="213" width="0.2169%" height="15" fill="rgb(207,181,40)" fg:x="369" fg:w="1"/><text x="80.2934%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.22%)</title><rect x="80.0434%" y="197" width="0.2169%" height="15" fill="rgb(254,173,49)" fg:x="369" fg:w="1"/><text x="80.2934%" y="207.50"></text></g><g><title>chess::move_gen::move_gen (148 samples, 32.10%)</title><rect x="49.0239%" y="261" width="32.1041%" height="15" fill="rgb(221,1,38)" fg:x="226" fg:w="148"/><text x="49.2739%" y="271.50">chess::move_gen::move_gen</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chess::move_gen::Move&gt;&gt; (4 samples, 0.87%)</title><rect x="80.2603%" y="245" width="0.8677%" height="15" fill="rgb(206,124,46)" fg:x="370" fg:w="4"/><text x="80.5103%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chess::move_gen::Move&gt;&gt; (4 samples, 0.87%)</title><rect x="80.2603%" y="229" width="0.8677%" height="15" fill="rgb(249,21,11)" fg:x="370" fg:w="4"/><text x="80.5103%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.87%)</title><rect x="80.2603%" y="213" width="0.8677%" height="15" fill="rgb(222,201,40)" fg:x="370" fg:w="4"/><text x="80.5103%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.87%)</title><rect x="80.2603%" y="197" width="0.8677%" height="15" fill="rgb(235,61,29)" fg:x="370" fg:w="4"/><text x="80.5103%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.87%)</title><rect x="80.2603%" y="181" width="0.8677%" height="15" fill="rgb(219,207,3)" fg:x="370" fg:w="4"/><text x="80.5103%" y="191.50"></text></g><g><title>free (4 samples, 0.87%)</title><rect x="80.2603%" y="165" width="0.8677%" height="15" fill="rgb(222,56,46)" fg:x="370" fg:w="4"/><text x="80.5103%" y="175.50"></text></g><g><title>[libc.so.6] (4 samples, 0.87%)</title><rect x="80.2603%" y="149" width="0.8677%" height="15" fill="rgb(239,76,54)" fg:x="370" fg:w="4"/><text x="80.5103%" y="159.50"></text></g><g><title>chess::perft::perft (3 samples, 0.65%)</title><rect x="81.1280%" y="261" width="0.6508%" height="15" fill="rgb(231,124,27)" fg:x="374" fg:w="3"/><text x="81.3780%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (6 samples, 1.30%)</title><rect x="85.9002%" y="245" width="1.3015%" height="15" fill="rgb(249,195,6)" fg:x="396" fg:w="6"/><text x="86.1502%" y="255.50"></text></g><g><title>core::ptr::read (1 samples, 0.22%)</title><rect x="86.9848%" y="229" width="0.2169%" height="15" fill="rgb(237,174,47)" fg:x="401" fg:w="1"/><text x="87.2348%" y="239.50"></text></g><g><title>chess::piece::PieceList::make_move (18 samples, 3.90%)</title><rect x="87.2017%" y="245" width="3.9046%" height="15" fill="rgb(206,201,31)" fg:x="402" fg:w="18"/><text x="87.4517%" y="255.50">ches..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 1.30%)</title><rect x="89.8048%" y="229" width="1.3015%" height="15" fill="rgb(231,57,52)" fg:x="414" fg:w="6"/><text x="90.0548%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 1.30%)</title><rect x="89.8048%" y="213" width="1.3015%" height="15" fill="rgb(248,177,22)" fg:x="414" fg:w="6"/><text x="90.0548%" y="223.50"></text></g><g><title>chess::unmake::unmake_move (13 samples, 2.82%)</title><rect x="91.1063%" y="245" width="2.8200%" height="15" fill="rgb(215,211,37)" fg:x="420" fg:w="13"/><text x="91.3563%" y="255.50">ch..</text></g><g><title>chess::zobrist_hashing::HashingNumbers::hash_move (10 samples, 2.17%)</title><rect x="91.7570%" y="229" width="2.1692%" height="15" fill="rgb(241,128,51)" fg:x="423" fg:w="10"/><text x="92.0070%" y="239.50">c..</text></g><g><title>chess::zobrist_hashing::Hash::hash_en_passant (4 samples, 0.87%)</title><rect x="93.9262%" y="245" width="0.8677%" height="15" fill="rgb(227,165,31)" fg:x="433" fg:w="4"/><text x="94.1762%" y="255.50"></text></g><g><title>chess::zobrist_hashing::Hash::hash_move (8 samples, 1.74%)</title><rect x="94.7939%" y="245" width="1.7354%" height="15" fill="rgb(228,167,24)" fg:x="437" fg:w="8"/><text x="95.0439%" y="255.50"></text></g><g><title>chess::api::board120_to_board64 (6 samples, 1.30%)</title><rect x="95.2278%" y="229" width="1.3015%" height="15" fill="rgb(228,143,12)" fg:x="439" fg:w="6"/><text x="95.4778%" y="239.50"></text></g><g><title>chess::zobrist_hashing::Hash::hash_turn (2 samples, 0.43%)</title><rect x="96.5293%" y="245" width="0.4338%" height="15" fill="rgb(249,149,8)" fg:x="445" fg:w="2"/><text x="96.7793%" y="255.50"></text></g><g><title>chess::unmake::unmake_move (74 samples, 16.05%)</title><rect x="81.7787%" y="261" width="16.0521%" height="15" fill="rgb(243,35,44)" fg:x="377" fg:w="74"/><text x="82.0287%" y="271.50">chess::unmake::unmake_move</text></g><g><title>core::slice::&lt;impl [T]&gt;::last (4 samples, 0.87%)</title><rect x="96.9631%" y="245" width="0.8677%" height="15" fill="rgb(246,89,9)" fg:x="447" fg:w="4"/><text x="97.2131%" y="255.50"></text></g><g><title>chess::perft::perft (375 samples, 81.34%)</title><rect x="17.7874%" y="277" width="81.3449%" height="15" fill="rgb(233,213,13)" fg:x="82" fg:w="375"/><text x="18.0374%" y="287.50">chess::perft::perft</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chess::move_gen::Move&gt;&gt; (6 samples, 1.30%)</title><rect x="97.8308%" y="261" width="1.3015%" height="15" fill="rgb(233,141,41)" fg:x="451" fg:w="6"/><text x="98.0808%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 1.30%)</title><rect x="97.8308%" y="245" width="1.3015%" height="15" fill="rgb(239,167,4)" fg:x="451" fg:w="6"/><text x="98.0808%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chess::move_gen::Move,alloc::alloc::Global&gt;&gt; (6 samples, 1.30%)</title><rect x="97.8308%" y="229" width="1.3015%" height="15" fill="rgb(209,217,16)" fg:x="451" fg:w="6"/><text x="98.0808%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 1.30%)</title><rect x="97.8308%" y="213" width="1.3015%" height="15" fill="rgb(219,88,35)" fg:x="451" fg:w="6"/><text x="98.0808%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chess::move_gen::Move&gt;&gt; (6 samples, 1.30%)</title><rect x="97.8308%" y="197" width="1.3015%" height="15" fill="rgb(220,193,23)" fg:x="451" fg:w="6"/><text x="98.0808%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 1.30%)</title><rect x="97.8308%" y="181" width="1.3015%" height="15" fill="rgb(230,90,52)" fg:x="451" fg:w="6"/><text x="98.0808%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 1.30%)</title><rect x="97.8308%" y="165" width="1.3015%" height="15" fill="rgb(252,106,19)" fg:x="451" fg:w="6"/><text x="98.0808%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 1.30%)</title><rect x="97.8308%" y="149" width="1.3015%" height="15" fill="rgb(206,74,20)" fg:x="451" fg:w="6"/><text x="98.0808%" y="159.50"></text></g><g><title>free (6 samples, 1.30%)</title><rect x="97.8308%" y="133" width="1.3015%" height="15" fill="rgb(230,138,44)" fg:x="451" fg:w="6"/><text x="98.0808%" y="143.50"></text></g><g><title>[libc.so.6] (6 samples, 1.30%)</title><rect x="97.8308%" y="117" width="1.3015%" height="15" fill="rgb(235,182,43)" fg:x="451" fg:w="6"/><text x="98.0808%" y="127.50"></text></g><g><title>[libc.so.6] (3 samples, 0.65%)</title><rect x="98.4816%" y="101" width="0.6508%" height="15" fill="rgb(242,16,51)" fg:x="454" fg:w="3"/><text x="98.7316%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.22%)</title><rect x="99.3492%" y="261" width="0.2169%" height="15" fill="rgb(248,9,4)" fg:x="458" fg:w="1"/><text x="99.5992%" y="271.50"></text></g><g><title>core::ptr::read (1 samples, 0.22%)</title><rect x="99.3492%" y="245" width="0.2169%" height="15" fill="rgb(210,31,22)" fg:x="458" fg:w="1"/><text x="99.5992%" y="255.50"></text></g><g><title>_start (407 samples, 88.29%)</title><rect x="11.4967%" y="613" width="88.2863%" height="15" fill="rgb(239,54,39)" fg:x="53" fg:w="407"/><text x="11.7467%" y="623.50">_start</text></g><g><title>__libc_start_main (407 samples, 88.29%)</title><rect x="11.4967%" y="597" width="88.2863%" height="15" fill="rgb(230,99,41)" fg:x="53" fg:w="407"/><text x="11.7467%" y="607.50">__libc_start_main</text></g><g><title>[libc.so.6] (407 samples, 88.29%)</title><rect x="11.4967%" y="581" width="88.2863%" height="15" fill="rgb(253,106,12)" fg:x="53" fg:w="407"/><text x="11.7467%" y="591.50">[libc.so.6]</text></g><g><title>main (407 samples, 88.29%)</title><rect x="11.4967%" y="565" width="88.2863%" height="15" fill="rgb(213,46,41)" fg:x="53" fg:w="407"/><text x="11.7467%" y="575.50">main</text></g><g><title>std::rt::lang_start_internal (407 samples, 88.29%)</title><rect x="11.4967%" y="549" width="88.2863%" height="15" fill="rgb(215,133,35)" fg:x="53" fg:w="407"/><text x="11.7467%" y="559.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (407 samples, 88.29%)</title><rect x="11.4967%" y="533" width="88.2863%" height="15" fill="rgb(213,28,5)" fg:x="53" fg:w="407"/><text x="11.7467%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (407 samples, 88.29%)</title><rect x="11.4967%" y="517" width="88.2863%" height="15" fill="rgb(215,77,49)" fg:x="53" fg:w="407"/><text x="11.7467%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (407 samples, 88.29%)</title><rect x="11.4967%" y="501" width="88.2863%" height="15" fill="rgb(248,100,22)" fg:x="53" fg:w="407"/><text x="11.7467%" y="511.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (407 samples, 88.29%)</title><rect x="11.4967%" y="485" width="88.2863%" height="15" fill="rgb(208,67,9)" fg:x="53" fg:w="407"/><text x="11.7467%" y="495.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (407 samples, 88.29%)</title><rect x="11.4967%" y="469" width="88.2863%" height="15" fill="rgb(219,133,21)" fg:x="53" fg:w="407"/><text x="11.7467%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (407 samples, 88.29%)</title><rect x="11.4967%" y="453" width="88.2863%" height="15" fill="rgb(246,46,29)" fg:x="53" fg:w="407"/><text x="11.7467%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (407 samples, 88.29%)</title><rect x="11.4967%" y="437" width="88.2863%" height="15" fill="rgb(246,185,52)" fg:x="53" fg:w="407"/><text x="11.7467%" y="447.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (407 samples, 88.29%)</title><rect x="11.4967%" y="421" width="88.2863%" height="15" fill="rgb(252,136,11)" fg:x="53" fg:w="407"/><text x="11.7467%" y="431.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (407 samples, 88.29%)</title><rect x="11.4967%" y="405" width="88.2863%" height="15" fill="rgb(219,138,53)" fg:x="53" fg:w="407"/><text x="11.7467%" y="415.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (407 samples, 88.29%)</title><rect x="11.4967%" y="389" width="88.2863%" height="15" fill="rgb(211,51,23)" fg:x="53" fg:w="407"/><text x="11.7467%" y="399.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (407 samples, 88.29%)</title><rect x="11.4967%" y="373" width="88.2863%" height="15" fill="rgb(247,221,28)" fg:x="53" fg:w="407"/><text x="11.7467%" y="383.50">core::ops::function::FnOnce::call_once</text></g><g><title>prueba::main (407 samples, 88.29%)</title><rect x="11.4967%" y="357" width="88.2863%" height="15" fill="rgb(251,222,45)" fg:x="53" fg:w="407"/><text x="11.7467%" y="367.50">prueba::main</text></g><g><title>chess::perft::perft (397 samples, 86.12%)</title><rect x="13.6659%" y="341" width="86.1171%" height="15" fill="rgb(217,162,53)" fg:x="63" fg:w="397"/><text x="13.9159%" y="351.50">chess::perft::perft</text></g><g><title>chess::perft::perft (397 samples, 86.12%)</title><rect x="13.6659%" y="325" width="86.1171%" height="15" fill="rgb(229,93,14)" fg:x="63" fg:w="397"/><text x="13.9159%" y="335.50">chess::perft::perft</text></g><g><title>chess::perft::perft (397 samples, 86.12%)</title><rect x="13.6659%" y="309" width="86.1171%" height="15" fill="rgb(209,67,49)" fg:x="63" fg:w="397"/><text x="13.9159%" y="319.50">chess::perft::perft</text></g><g><title>chess::perft::perft (396 samples, 85.90%)</title><rect x="13.8829%" y="293" width="85.9002%" height="15" fill="rgb(213,87,29)" fg:x="64" fg:w="396"/><text x="14.1329%" y="303.50">chess::perft::perft</text></g><g><title>chess::unmake::unmake_move (3 samples, 0.65%)</title><rect x="99.1323%" y="277" width="0.6508%" height="15" fill="rgb(205,151,52)" fg:x="457" fg:w="3"/><text x="99.3823%" y="287.50"></text></g><g><title>chess::zobrist_hashing::Hash::hash_move (1 samples, 0.22%)</title><rect x="99.5662%" y="261" width="0.2169%" height="15" fill="rgb(253,215,39)" fg:x="459" fg:w="1"/><text x="99.8162%" y="271.50"></text></g><g><title>chess::api::board120_to_board64 (1 samples, 0.22%)</title><rect x="99.5662%" y="245" width="0.2169%" height="15" fill="rgb(221,220,41)" fg:x="459" fg:w="1"/><text x="99.8162%" y="255.50"></text></g><g><title>all (461 samples, 100%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(218,133,21)" fg:x="0" fg:w="461"/><text x="0.2500%" y="655.50"></text></g><g><title>prueba (461 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(221,193,43)" fg:x="0" fg:w="461"/><text x="0.2500%" y="639.50">prueba</text></g><g><title>realloc (1 samples, 0.22%)</title><rect x="99.7831%" y="613" width="0.2169%" height="15" fill="rgb(240,128,52)" fg:x="460" fg:w="1"/><text x="100.0331%" y="623.50"></text></g></svg></svg>
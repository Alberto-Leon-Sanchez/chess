<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="694" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="677.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="677.00"> </text><svg id="frames" x="10" width="1180" total_samples="21895"><g><title>[libc.so.6] (26 samples, 0.12%)</title><rect x="0.0000%" y="597" width="0.1187%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="26"/><text x="0.2500%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.02%)</title><rect x="0.1279%" y="597" width="0.0183%" height="15" fill="rgb(217,0,24)" fg:x="28" fg:w="4"/><text x="0.3779%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.01%)</title><rect x="0.1325%" y="581" width="0.0137%" height="15" fill="rgb(221,193,54)" fg:x="29" fg:w="3"/><text x="0.3825%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.01%)</title><rect x="0.1325%" y="565" width="0.0137%" height="15" fill="rgb(248,212,6)" fg:x="29" fg:w="3"/><text x="0.3825%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (3 samples, 0.01%)</title><rect x="0.1325%" y="549" width="0.0137%" height="15" fill="rgb(208,68,35)" fg:x="29" fg:w="3"/><text x="0.3825%" y="559.50"></text></g><g><title>chess::make_move::aux (83 samples, 0.38%)</title><rect x="0.1462%" y="597" width="0.3791%" height="15" fill="rgb(232,128,0)" fg:x="32" fg:w="83"/><text x="0.3962%" y="607.50"></text></g><g><title>chess::move_gen::discover_check (7 samples, 0.03%)</title><rect x="0.5344%" y="597" width="0.0320%" height="15" fill="rgb(207,160,47)" fg:x="117" fg:w="7"/><text x="0.7844%" y="607.50"></text></g><g><title>[[heap]] (127 samples, 0.58%)</title><rect x="0.0000%" y="613" width="0.5800%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="127"/><text x="0.2500%" y="623.50"></text></g><g><title>[libc.so.6] (23 samples, 0.11%)</title><rect x="0.5800%" y="597" width="0.1050%" height="15" fill="rgb(218,30,26)" fg:x="127" fg:w="23"/><text x="0.8300%" y="607.50"></text></g><g><title>__rdl_realloc (8 samples, 0.04%)</title><rect x="0.6851%" y="597" width="0.0365%" height="15" fill="rgb(220,122,19)" fg:x="150" fg:w="8"/><text x="0.9351%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.02%)</title><rect x="0.7216%" y="597" width="0.0228%" height="15" fill="rgb(250,228,42)" fg:x="158" fg:w="5"/><text x="0.9716%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.02%)</title><rect x="0.7216%" y="581" width="0.0228%" height="15" fill="rgb(240,193,28)" fg:x="158" fg:w="5"/><text x="0.9716%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (4 samples, 0.02%)</title><rect x="0.7262%" y="565" width="0.0183%" height="15" fill="rgb(216,20,37)" fg:x="159" fg:w="4"/><text x="0.9762%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (4 samples, 0.02%)</title><rect x="0.7262%" y="549" width="0.0183%" height="15" fill="rgb(206,188,39)" fg:x="159" fg:w="4"/><text x="0.9762%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (13 samples, 0.06%)</title><rect x="0.7445%" y="597" width="0.0594%" height="15" fill="rgb(217,207,13)" fg:x="163" fg:w="13"/><text x="0.9945%" y="607.50"></text></g><g><title>chess::attack_gen::attack_gen (3 samples, 0.01%)</title><rect x="0.8038%" y="597" width="0.0137%" height="15" fill="rgb(231,73,38)" fg:x="176" fg:w="3"/><text x="1.0538%" y="607.50"></text></g><g><title>chess::make_move::aux (11 samples, 0.05%)</title><rect x="0.8175%" y="597" width="0.0502%" height="15" fill="rgb(225,20,46)" fg:x="179" fg:w="11"/><text x="1.0675%" y="607.50"></text></g><g><title>chess::make_move::make_move (6 samples, 0.03%)</title><rect x="0.8678%" y="597" width="0.0274%" height="15" fill="rgb(210,31,41)" fg:x="190" fg:w="6"/><text x="1.1178%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (4 samples, 0.02%)</title><rect x="0.9546%" y="549" width="0.0183%" height="15" fill="rgb(221,200,47)" fg:x="209" fg:w="4"/><text x="1.2046%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.02%)</title><rect x="0.9546%" y="533" width="0.0183%" height="15" fill="rgb(226,26,5)" fg:x="209" fg:w="4"/><text x="1.2046%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (11 samples, 0.05%)</title><rect x="0.9546%" y="581" width="0.0502%" height="15" fill="rgb(249,33,26)" fg:x="209" fg:w="11"/><text x="1.2046%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (11 samples, 0.05%)</title><rect x="0.9546%" y="565" width="0.0502%" height="15" fill="rgb(235,183,28)" fg:x="209" fg:w="11"/><text x="1.2046%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.03%)</title><rect x="0.9728%" y="549" width="0.0320%" height="15" fill="rgb(221,5,38)" fg:x="213" fg:w="7"/><text x="1.2228%" y="559.50"></text></g><g><title>chess::move_gen::move_gen (28 samples, 0.13%)</title><rect x="0.8997%" y="597" width="0.1279%" height="15" fill="rgb(247,18,42)" fg:x="197" fg:w="28"/><text x="1.1497%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chess::move_gen::Move&gt;&gt; (3 samples, 0.01%)</title><rect x="1.0139%" y="581" width="0.0137%" height="15" fill="rgb(241,131,45)" fg:x="222" fg:w="3"/><text x="1.2639%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chess::move_gen::Move&gt;&gt; (3 samples, 0.01%)</title><rect x="1.0139%" y="565" width="0.0137%" height="15" fill="rgb(249,31,29)" fg:x="222" fg:w="3"/><text x="1.2639%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="1.0139%" y="549" width="0.0137%" height="15" fill="rgb(225,111,53)" fg:x="222" fg:w="3"/><text x="1.2639%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.01%)</title><rect x="1.0139%" y="533" width="0.0137%" height="15" fill="rgb(238,160,17)" fg:x="222" fg:w="3"/><text x="1.2639%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.01%)</title><rect x="1.0139%" y="517" width="0.0137%" height="15" fill="rgb(214,148,48)" fg:x="222" fg:w="3"/><text x="1.2639%" y="527.50"></text></g><g><title>chess::move_gen::pawn_moves (4 samples, 0.02%)</title><rect x="1.0276%" y="597" width="0.0183%" height="15" fill="rgb(232,36,49)" fg:x="225" fg:w="4"/><text x="1.2776%" y="607.50"></text></g><g><title>chess::perft::perft (11 samples, 0.05%)</title><rect x="1.0459%" y="597" width="0.0502%" height="15" fill="rgb(209,103,24)" fg:x="229" fg:w="11"/><text x="1.2959%" y="607.50"></text></g><g><title>chess::piece::PieceList::make_move (6 samples, 0.03%)</title><rect x="1.1098%" y="597" width="0.0274%" height="15" fill="rgb(229,88,8)" fg:x="243" fg:w="6"/><text x="1.3598%" y="607.50"></text></g><g><title>[[stack]] (152 samples, 0.69%)</title><rect x="0.5800%" y="613" width="0.6942%" height="15" fill="rgb(213,181,19)" fg:x="127" fg:w="152"/><text x="0.8300%" y="623.50"></text></g><g><title>realloc (27 samples, 0.12%)</title><rect x="1.1509%" y="597" width="0.1233%" height="15" fill="rgb(254,191,54)" fg:x="252" fg:w="27"/><text x="1.4009%" y="607.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.03%)</title><rect x="1.2743%" y="613" width="0.0320%" height="15" fill="rgb(241,83,37)" fg:x="279" fg:w="7"/><text x="1.5243%" y="623.50"></text></g><g><title>[libc.so.6] (9 samples, 0.04%)</title><rect x="1.3062%" y="613" width="0.0411%" height="15" fill="rgb(233,36,39)" fg:x="286" fg:w="9"/><text x="1.5562%" y="623.50"></text></g><g><title>[libc.so.6] (400 samples, 1.83%)</title><rect x="1.3565%" y="597" width="1.8269%" height="15" fill="rgb(226,3,54)" fg:x="297" fg:w="400"/><text x="1.6065%" y="607.50">[..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (10 samples, 0.05%)</title><rect x="3.1834%" y="597" width="0.0457%" height="15" fill="rgb(245,192,40)" fg:x="697" fg:w="10"/><text x="3.4334%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (12 samples, 0.05%)</title><rect x="3.2290%" y="597" width="0.0548%" height="15" fill="rgb(238,167,29)" fg:x="707" fg:w="12"/><text x="3.4790%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (11 samples, 0.05%)</title><rect x="3.2336%" y="581" width="0.0502%" height="15" fill="rgb(232,182,51)" fg:x="708" fg:w="11"/><text x="3.4836%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (8 samples, 0.04%)</title><rect x="3.2473%" y="565" width="0.0365%" height="15" fill="rgb(231,60,39)" fg:x="711" fg:w="8"/><text x="3.4973%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (8 samples, 0.04%)</title><rect x="3.2473%" y="549" width="0.0365%" height="15" fill="rgb(208,69,12)" fg:x="711" fg:w="8"/><text x="3.4973%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (43 samples, 0.20%)</title><rect x="3.2839%" y="597" width="0.1964%" height="15" fill="rgb(235,93,37)" fg:x="719" fg:w="43"/><text x="3.5339%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4 samples, 0.02%)</title><rect x="3.4620%" y="581" width="0.0183%" height="15" fill="rgb(213,116,39)" fg:x="758" fg:w="4"/><text x="3.7120%" y="591.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4 samples, 0.02%)</title><rect x="3.4620%" y="565" width="0.0183%" height="15" fill="rgb(222,207,29)" fg:x="758" fg:w="4"/><text x="3.7120%" y="575.50"></text></g><g><title>alloc::alloc::realloc (4 samples, 0.02%)</title><rect x="3.4620%" y="549" width="0.0183%" height="15" fill="rgb(206,96,30)" fg:x="758" fg:w="4"/><text x="3.7120%" y="559.50"></text></g><g><title>chess::make_move::aux (168 samples, 0.77%)</title><rect x="3.4848%" y="597" width="0.7673%" height="15" fill="rgb(218,138,4)" fg:x="763" fg:w="168"/><text x="3.7348%" y="607.50"></text></g><g><title>chess::make_move::update_game_state (3 samples, 0.01%)</title><rect x="4.2384%" y="581" width="0.0137%" height="15" fill="rgb(250,191,14)" fg:x="928" fg:w="3"/><text x="4.4884%" y="591.50"></text></g><g><title>chess::make_move::make_move (82 samples, 0.37%)</title><rect x="4.2521%" y="597" width="0.3745%" height="15" fill="rgb(239,60,40)" fg:x="931" fg:w="82"/><text x="4.5021%" y="607.50"></text></g><g><title>chess::move_gen::direction_sliding (21 samples, 0.10%)</title><rect x="4.6266%" y="597" width="0.0959%" height="15" fill="rgb(206,27,48)" fg:x="1013" fg:w="21"/><text x="4.8766%" y="607.50"></text></g><g><title>chess::move_gen::discover_check (6 samples, 0.03%)</title><rect x="4.7225%" y="597" width="0.0274%" height="15" fill="rgb(225,35,8)" fg:x="1034" fg:w="6"/><text x="4.9725%" y="607.50"></text></g><g><title>chess::move_gen::knight_moves (4 samples, 0.02%)</title><rect x="4.7499%" y="597" width="0.0183%" height="15" fill="rgb(250,213,24)" fg:x="1040" fg:w="4"/><text x="4.9999%" y="607.50"></text></g><g><title>chess::move_gen::move_gen (3 samples, 0.01%)</title><rect x="4.7682%" y="597" width="0.0137%" height="15" fill="rgb(247,123,22)" fg:x="1044" fg:w="3"/><text x="5.0182%" y="607.50"></text></g><g><title>chess::move_gen::pawn_moves (11 samples, 0.05%)</title><rect x="4.7819%" y="597" width="0.0502%" height="15" fill="rgb(231,138,38)" fg:x="1047" fg:w="11"/><text x="5.0319%" y="607.50"></text></g><g><title>chess::perft::perft (188 samples, 0.86%)</title><rect x="4.8322%" y="597" width="0.8586%" height="15" fill="rgb(231,145,46)" fg:x="1058" fg:w="188"/><text x="5.0822%" y="607.50"></text></g><g><title>chess::piece::PieceList::add (3 samples, 0.01%)</title><rect x="5.6908%" y="597" width="0.0137%" height="15" fill="rgb(251,118,11)" fg:x="1246" fg:w="3"/><text x="5.9408%" y="607.50"></text></g><g><title>chess::piece::PieceList::add_piece (3 samples, 0.01%)</title><rect x="5.7045%" y="597" width="0.0137%" height="15" fill="rgb(217,147,25)" fg:x="1249" fg:w="3"/><text x="5.9545%" y="607.50"></text></g><g><title>chess::piece::PieceList::make_move (39 samples, 0.18%)</title><rect x="5.7273%" y="597" width="0.1781%" height="15" fill="rgb(247,81,37)" fg:x="1254" fg:w="39"/><text x="5.9773%" y="607.50"></text></g><g><title>chess::unmake::unmake_move (74 samples, 0.34%)</title><rect x="5.9100%" y="597" width="0.3380%" height="15" fill="rgb(209,12,38)" fg:x="1294" fg:w="74"/><text x="6.1600%" y="607.50"></text></g><g><title>free (10 samples, 0.05%)</title><rect x="6.2480%" y="597" width="0.0457%" height="15" fill="rgb(227,1,9)" fg:x="1368" fg:w="10"/><text x="6.4980%" y="607.50"></text></g><g><title>[unknown] (1,082 samples, 4.94%)</title><rect x="1.3565%" y="613" width="4.9418%" height="15" fill="rgb(248,47,43)" fg:x="297" fg:w="1082"/><text x="1.6065%" y="623.50">[unkno..</text></g><g><title>__rdl_realloc (4 samples, 0.02%)</title><rect x="6.2982%" y="613" width="0.0183%" height="15" fill="rgb(221,10,30)" fg:x="1379" fg:w="4"/><text x="6.5482%" y="623.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (4 samples, 0.02%)</title><rect x="6.2982%" y="597" width="0.0183%" height="15" fill="rgb(210,229,1)" fg:x="1379" fg:w="4"/><text x="6.5482%" y="607.50"></text></g><g><title>[libc.so.6] (13 samples, 0.06%)</title><rect x="6.3211%" y="277" width="0.0594%" height="15" fill="rgb(222,148,37)" fg:x="1384" fg:w="13"/><text x="6.5711%" y="287.50"></text></g><g><title>[libc.so.6] (4 samples, 0.02%)</title><rect x="6.3942%" y="245" width="0.0183%" height="15" fill="rgb(234,67,33)" fg:x="1400" fg:w="4"/><text x="6.6442%" y="255.50"></text></g><g><title>chess::make_move::update_game_state (3 samples, 0.01%)</title><rect x="6.4124%" y="245" width="0.0137%" height="15" fill="rgb(247,98,35)" fg:x="1404" fg:w="3"/><text x="6.6624%" y="255.50"></text></g><g><title>chess::make_move::make_move (11 samples, 0.05%)</title><rect x="6.3805%" y="277" width="0.0502%" height="15" fill="rgb(247,138,52)" fg:x="1397" fg:w="11"/><text x="6.6305%" y="287.50"></text></g><g><title>chess::make_move::aux (10 samples, 0.05%)</title><rect x="6.3850%" y="261" width="0.0457%" height="15" fill="rgb(213,79,30)" fg:x="1398" fg:w="10"/><text x="6.6350%" y="271.50"></text></g><g><title>chess::move_gen::move_gen (7 samples, 0.03%)</title><rect x="6.4307%" y="277" width="0.0320%" height="15" fill="rgb(246,177,23)" fg:x="1408" fg:w="7"/><text x="6.6807%" y="287.50"></text></g><g><title>[libc.so.6] (264 samples, 1.21%)</title><rect x="6.5494%" y="261" width="1.2058%" height="15" fill="rgb(230,62,27)" fg:x="1434" fg:w="264"/><text x="6.7994%" y="271.50"></text></g><g><title>[libc.so.6] (28 samples, 0.13%)</title><rect x="7.7735%" y="245" width="0.1279%" height="15" fill="rgb(216,154,8)" fg:x="1702" fg:w="28"/><text x="8.0235%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.01%)</title><rect x="7.9927%" y="229" width="0.0137%" height="15" fill="rgb(244,35,45)" fg:x="1750" fg:w="3"/><text x="8.2427%" y="239.50"></text></g><g><title>[libc.so.6] (101 samples, 0.46%)</title><rect x="8.0064%" y="229" width="0.4613%" height="15" fill="rgb(251,115,12)" fg:x="1753" fg:w="101"/><text x="8.2564%" y="239.50"></text></g><g><title>chess::make_move::aux (4 samples, 0.02%)</title><rect x="8.4677%" y="229" width="0.0183%" height="15" fill="rgb(240,54,50)" fg:x="1854" fg:w="4"/><text x="8.7177%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.01%)</title><rect x="8.5545%" y="213" width="0.0137%" height="15" fill="rgb(233,84,52)" fg:x="1873" fg:w="3"/><text x="8.8045%" y="223.50"></text></g><g><title>[libc.so.6] (44 samples, 0.20%)</title><rect x="8.5682%" y="213" width="0.2010%" height="15" fill="rgb(207,117,47)" fg:x="1876" fg:w="44"/><text x="8.8182%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9 samples, 0.04%)</title><rect x="8.7691%" y="213" width="0.0411%" height="15" fill="rgb(249,43,39)" fg:x="1920" fg:w="9"/><text x="9.0191%" y="223.50"></text></g><g><title>core::ptr::write (4 samples, 0.02%)</title><rect x="8.7920%" y="197" width="0.0183%" height="15" fill="rgb(209,38,44)" fg:x="1925" fg:w="4"/><text x="9.0420%" y="207.50"></text></g><g><title>chess::make_move::update_game_state (73 samples, 0.33%)</title><rect x="8.4860%" y="229" width="0.3334%" height="15" fill="rgb(236,212,23)" fg:x="1858" fg:w="73"/><text x="8.7360%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (6 samples, 0.03%)</title><rect x="8.9929%" y="213" width="0.0274%" height="15" fill="rgb(242,79,21)" fg:x="1969" fg:w="6"/><text x="9.2429%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (6 samples, 0.03%)</title><rect x="8.9929%" y="197" width="0.0274%" height="15" fill="rgb(211,96,35)" fg:x="1969" fg:w="6"/><text x="9.2429%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (6 samples, 0.03%)</title><rect x="8.9929%" y="181" width="0.0274%" height="15" fill="rgb(253,215,40)" fg:x="1969" fg:w="6"/><text x="9.2429%" y="191.50"></text></g><g><title>chess::make_move::make_move (278 samples, 1.27%)</title><rect x="7.7552%" y="261" width="1.2697%" height="15" fill="rgb(211,81,21)" fg:x="1698" fg:w="278"/><text x="8.0052%" y="271.50"></text></g><g><title>chess::make_move::aux (246 samples, 1.12%)</title><rect x="7.9013%" y="245" width="1.1235%" height="15" fill="rgb(208,190,38)" fg:x="1730" fg:w="246"/><text x="8.1513%" y="255.50"></text></g><g><title>chess::piece::PieceList::make_move (45 samples, 0.21%)</title><rect x="8.8194%" y="229" width="0.2055%" height="15" fill="rgb(235,213,38)" fg:x="1931" fg:w="45"/><text x="9.0694%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (11 samples, 0.05%)</title><rect x="9.0432%" y="133" width="0.0502%" height="15" fill="rgb(237,122,38)" fg:x="1980" fg:w="11"/><text x="9.2932%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (11 samples, 0.05%)</title><rect x="9.0432%" y="117" width="0.0502%" height="15" fill="rgb(244,218,35)" fg:x="1980" fg:w="11"/><text x="9.2932%" y="127.50"></text></g><g><title>alloc::alloc::realloc (11 samples, 0.05%)</title><rect x="9.0432%" y="101" width="0.0502%" height="15" fill="rgb(240,68,47)" fg:x="1980" fg:w="11"/><text x="9.2932%" y="111.50"></text></g><g><title>realloc (10 samples, 0.05%)</title><rect x="9.0477%" y="85" width="0.0457%" height="15" fill="rgb(210,16,53)" fg:x="1981" fg:w="10"/><text x="9.2977%" y="95.50"></text></g><g><title>[libc.so.6] (8 samples, 0.04%)</title><rect x="9.0569%" y="69" width="0.0365%" height="15" fill="rgb(235,124,12)" fg:x="1983" fg:w="8"/><text x="9.3069%" y="79.50"></text></g><g><title>[libc.so.6] (5 samples, 0.02%)</title><rect x="9.0706%" y="53" width="0.0228%" height="15" fill="rgb(224,169,11)" fg:x="1986" fg:w="5"/><text x="9.3206%" y="63.50"></text></g><g><title>alloc::raw_vec::finish_grow (14 samples, 0.06%)</title><rect x="9.0386%" y="149" width="0.0639%" height="15" fill="rgb(250,166,2)" fg:x="1979" fg:w="14"/><text x="9.2886%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (18 samples, 0.08%)</title><rect x="9.0295%" y="213" width="0.0822%" height="15" fill="rgb(242,216,29)" fg:x="1977" fg:w="18"/><text x="9.2795%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (18 samples, 0.08%)</title><rect x="9.0295%" y="197" width="0.0822%" height="15" fill="rgb(230,116,27)" fg:x="1977" fg:w="18"/><text x="9.2795%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (18 samples, 0.08%)</title><rect x="9.0295%" y="181" width="0.0822%" height="15" fill="rgb(228,99,48)" fg:x="1977" fg:w="18"/><text x="9.2795%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (18 samples, 0.08%)</title><rect x="9.0295%" y="165" width="0.0822%" height="15" fill="rgb(253,11,6)" fg:x="1977" fg:w="18"/><text x="9.2795%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (25 samples, 0.11%)</title><rect x="9.0295%" y="245" width="0.1142%" height="15" fill="rgb(247,143,39)" fg:x="1977" fg:w="25"/><text x="9.2795%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (25 samples, 0.11%)</title><rect x="9.0295%" y="229" width="0.1142%" height="15" fill="rgb(236,97,10)" fg:x="1977" fg:w="25"/><text x="9.2795%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.03%)</title><rect x="9.1117%" y="213" width="0.0320%" height="15" fill="rgb(233,208,19)" fg:x="1995" fg:w="7"/><text x="9.3617%" y="223.50"></text></g><g><title>[libc.so.6] (7 samples, 0.03%)</title><rect x="9.1117%" y="197" width="0.0320%" height="15" fill="rgb(216,164,2)" fg:x="1995" fg:w="7"/><text x="9.3617%" y="207.50"></text></g><g><title>chess::attack_gen::attack_gen (3 samples, 0.01%)</title><rect x="9.1573%" y="229" width="0.0137%" height="15" fill="rgb(220,129,5)" fg:x="2005" fg:w="3"/><text x="9.4073%" y="239.50"></text></g><g><title>chess::attack_gen::direction_sliding (12 samples, 0.05%)</title><rect x="9.1710%" y="229" width="0.0548%" height="15" fill="rgb(242,17,10)" fg:x="2008" fg:w="12"/><text x="9.4210%" y="239.50"></text></g><g><title>chess::attack_gen::king_moves (10 samples, 0.05%)</title><rect x="9.2259%" y="229" width="0.0457%" height="15" fill="rgb(242,107,0)" fg:x="2020" fg:w="10"/><text x="9.4759%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.03%)</title><rect x="9.2396%" y="213" width="0.0320%" height="15" fill="rgb(251,28,31)" fg:x="2023" fg:w="7"/><text x="9.4896%" y="223.50"></text></g><g><title>chess::attack_gen::knight_moves (4 samples, 0.02%)</title><rect x="9.2715%" y="229" width="0.0183%" height="15" fill="rgb(233,223,10)" fg:x="2030" fg:w="4"/><text x="9.5215%" y="239.50"></text></g><g><title>chess::attack_gen::attack_gen (34 samples, 0.16%)</title><rect x="9.1436%" y="245" width="0.1553%" height="15" fill="rgb(215,21,27)" fg:x="2002" fg:w="34"/><text x="9.3936%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4 samples, 0.02%)</title><rect x="9.3857%" y="165" width="0.0183%" height="15" fill="rgb(232,23,21)" fg:x="2055" fg:w="4"/><text x="9.6357%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4 samples, 0.02%)</title><rect x="9.3857%" y="149" width="0.0183%" height="15" fill="rgb(244,5,23)" fg:x="2055" fg:w="4"/><text x="9.6357%" y="159.50"></text></g><g><title>alloc::alloc::realloc (4 samples, 0.02%)</title><rect x="9.3857%" y="133" width="0.0183%" height="15" fill="rgb(226,81,46)" fg:x="2055" fg:w="4"/><text x="9.6357%" y="143.50"></text></g><g><title>realloc (4 samples, 0.02%)</title><rect x="9.3857%" y="117" width="0.0183%" height="15" fill="rgb(247,70,30)" fg:x="2055" fg:w="4"/><text x="9.6357%" y="127.50"></text></g><g><title>[libc.so.6] (3 samples, 0.01%)</title><rect x="9.3903%" y="101" width="0.0137%" height="15" fill="rgb(212,68,19)" fg:x="2056" fg:w="3"/><text x="9.6403%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.02%)</title><rect x="9.3857%" y="213" width="0.0228%" height="15" fill="rgb(240,187,13)" fg:x="2055" fg:w="5"/><text x="9.6357%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.02%)</title><rect x="9.3857%" y="197" width="0.0228%" height="15" fill="rgb(223,113,26)" fg:x="2055" fg:w="5"/><text x="9.6357%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.02%)</title><rect x="9.3857%" y="181" width="0.0228%" height="15" fill="rgb(206,192,2)" fg:x="2055" fg:w="5"/><text x="9.6357%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.03%)</title><rect x="9.3857%" y="229" width="0.0274%" height="15" fill="rgb(241,108,4)" fg:x="2055" fg:w="6"/><text x="9.6357%" y="239.50"></text></g><g><title>chess::move_gen::direction_sliding (27 samples, 0.12%)</title><rect x="9.2989%" y="245" width="0.1233%" height="15" fill="rgb(247,173,49)" fg:x="2036" fg:w="27"/><text x="9.5489%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="9.4588%" y="229" width="0.0183%" height="15" fill="rgb(224,114,35)" fg:x="2071" fg:w="4"/><text x="9.7088%" y="239.50"></text></g><g><title>chess::move_gen::get_pinned_pieces (14 samples, 0.06%)</title><rect x="9.4222%" y="245" width="0.0639%" height="15" fill="rgb(245,159,27)" fg:x="2063" fg:w="14"/><text x="9.6722%" y="255.50"></text></g><g><title>chess::move_gen::king_moves (6 samples, 0.03%)</title><rect x="9.4862%" y="245" width="0.0274%" height="15" fill="rgb(245,172,44)" fg:x="2077" fg:w="6"/><text x="9.7362%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.01%)</title><rect x="9.5821%" y="181" width="0.0137%" height="15" fill="rgb(236,23,11)" fg:x="2098" fg:w="3"/><text x="9.8321%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.01%)</title><rect x="9.5821%" y="165" width="0.0137%" height="15" fill="rgb(205,117,38)" fg:x="2098" fg:w="3"/><text x="9.8321%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.01%)</title><rect x="9.5821%" y="149" width="0.0137%" height="15" fill="rgb(237,72,25)" fg:x="2098" fg:w="3"/><text x="9.8321%" y="159.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.01%)</title><rect x="9.5821%" y="133" width="0.0137%" height="15" fill="rgb(244,70,9)" fg:x="2098" fg:w="3"/><text x="9.8321%" y="143.50"></text></g><g><title>chess::move_gen::knight_moves (19 samples, 0.09%)</title><rect x="9.5136%" y="245" width="0.0868%" height="15" fill="rgb(217,125,39)" fg:x="2083" fg:w="19"/><text x="9.7636%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.03%)</title><rect x="9.5730%" y="229" width="0.0274%" height="15" fill="rgb(235,36,10)" fg:x="2096" fg:w="6"/><text x="9.8230%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.02%)</title><rect x="9.5775%" y="213" width="0.0228%" height="15" fill="rgb(251,123,47)" fg:x="2097" fg:w="5"/><text x="9.8275%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.02%)</title><rect x="9.5775%" y="197" width="0.0228%" height="15" fill="rgb(221,13,13)" fg:x="2097" fg:w="5"/><text x="9.8275%" y="207.50"></text></g><g><title>chess::move_gen::move_gen (7 samples, 0.03%)</title><rect x="9.6004%" y="245" width="0.0320%" height="15" fill="rgb(238,131,9)" fg:x="2102" fg:w="7"/><text x="9.8504%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3 samples, 0.01%)</title><rect x="9.7145%" y="181" width="0.0137%" height="15" fill="rgb(211,50,8)" fg:x="2127" fg:w="3"/><text x="9.9645%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.01%)</title><rect x="9.7282%" y="165" width="0.0137%" height="15" fill="rgb(245,182,24)" fg:x="2130" fg:w="3"/><text x="9.9782%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.01%)</title><rect x="9.7282%" y="149" width="0.0137%" height="15" fill="rgb(242,14,37)" fg:x="2130" fg:w="3"/><text x="9.9782%" y="159.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.01%)</title><rect x="9.7282%" y="133" width="0.0137%" height="15" fill="rgb(246,228,12)" fg:x="2130" fg:w="3"/><text x="9.9782%" y="143.50"></text></g><g><title>realloc (3 samples, 0.01%)</title><rect x="9.7282%" y="117" width="0.0137%" height="15" fill="rgb(213,55,15)" fg:x="2130" fg:w="3"/><text x="9.9782%" y="127.50"></text></g><g><title>[libc.so.6] (3 samples, 0.01%)</title><rect x="9.7282%" y="101" width="0.0137%" height="15" fill="rgb(209,9,3)" fg:x="2130" fg:w="3"/><text x="9.9782%" y="111.50"></text></g><g><title>[libc.so.6] (3 samples, 0.01%)</title><rect x="9.7282%" y="85" width="0.0137%" height="15" fill="rgb(230,59,30)" fg:x="2130" fg:w="3"/><text x="9.9782%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.02%)</title><rect x="9.7282%" y="181" width="0.0228%" height="15" fill="rgb(209,121,21)" fg:x="2130" fg:w="5"/><text x="9.9782%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.04%)</title><rect x="9.7145%" y="213" width="0.0411%" height="15" fill="rgb(220,109,13)" fg:x="2127" fg:w="9"/><text x="9.9645%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 0.04%)</title><rect x="9.7145%" y="197" width="0.0411%" height="15" fill="rgb(232,18,1)" fg:x="2127" fg:w="9"/><text x="9.9645%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (15 samples, 0.07%)</title><rect x="9.7145%" y="229" width="0.0685%" height="15" fill="rgb(215,41,42)" fg:x="2127" fg:w="15"/><text x="9.9645%" y="239.50"></text></g><g><title>core::ptr::write (5 samples, 0.02%)</title><rect x="9.7602%" y="213" width="0.0228%" height="15" fill="rgb(224,123,36)" fg:x="2137" fg:w="5"/><text x="10.0102%" y="223.50"></text></g><g><title>chess::attack_gen::direction_sliding (12 samples, 0.05%)</title><rect x="9.8059%" y="213" width="0.0548%" height="15" fill="rgb(240,125,3)" fg:x="2147" fg:w="12"/><text x="10.0559%" y="223.50"></text></g><g><title>chess::move_gen::discover_check (18 samples, 0.08%)</title><rect x="9.7831%" y="229" width="0.0822%" height="15" fill="rgb(205,98,50)" fg:x="2142" fg:w="18"/><text x="10.0331%" y="239.50"></text></g><g><title>chess::move_gen::pawn_moves (53 samples, 0.24%)</title><rect x="9.6323%" y="245" width="0.2421%" height="15" fill="rgb(205,185,37)" fg:x="2109" fg:w="53"/><text x="9.8823%" y="255.50"></text></g><g><title>chess::move_gen::move_gen (195 samples, 0.89%)</title><rect x="9.0249%" y="261" width="0.8906%" height="15" fill="rgb(238,207,15)" fg:x="1976" fg:w="195"/><text x="9.2749%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chess::move_gen::Move&gt;&gt; (8 samples, 0.04%)</title><rect x="9.8790%" y="245" width="0.0365%" height="15" fill="rgb(213,199,42)" fg:x="2163" fg:w="8"/><text x="10.1290%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chess::move_gen::Move&gt;&gt; (8 samples, 0.04%)</title><rect x="9.8790%" y="229" width="0.0365%" height="15" fill="rgb(235,201,11)" fg:x="2163" fg:w="8"/><text x="10.1290%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.04%)</title><rect x="9.8790%" y="213" width="0.0365%" height="15" fill="rgb(207,46,11)" fg:x="2163" fg:w="8"/><text x="10.1290%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.04%)</title><rect x="9.8790%" y="197" width="0.0365%" height="15" fill="rgb(241,35,35)" fg:x="2163" fg:w="8"/><text x="10.1290%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.04%)</title><rect x="9.8790%" y="181" width="0.0365%" height="15" fill="rgb(243,32,47)" fg:x="2163" fg:w="8"/><text x="10.1290%" y="191.50"></text></g><g><title>free (5 samples, 0.02%)</title><rect x="9.8927%" y="165" width="0.0228%" height="15" fill="rgb(247,202,23)" fg:x="2166" fg:w="5"/><text x="10.1427%" y="175.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.16%)</title><rect x="11.2857%" y="245" width="0.1553%" height="15" fill="rgb(219,102,11)" fg:x="2471" fg:w="34"/><text x="11.5357%" y="255.50"></text></g><g><title>core::ptr::read (3 samples, 0.01%)</title><rect x="11.4273%" y="229" width="0.0137%" height="15" fill="rgb(243,110,44)" fg:x="2502" fg:w="3"/><text x="11.6773%" y="239.50"></text></g><g><title>[libc.so.6] (6,419 samples, 29.32%)</title><rect x="11.4410%" y="245" width="29.3172%" height="15" fill="rgb(222,74,54)" fg:x="2505" fg:w="6419"/><text x="11.6910%" y="255.50">[libc.so.6]</text></g><g><title>[libc.so.6] (614 samples, 2.80%)</title><rect x="41.5072%" y="229" width="2.8043%" height="15" fill="rgb(216,99,12)" fg:x="9088" fg:w="614"/><text x="41.7572%" y="239.50">[l..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.02%)</title><rect x="46.7047%" y="213" width="0.0183%" height="15" fill="rgb(226,22,26)" fg:x="10226" fg:w="4"/><text x="46.9547%" y="223.50"></text></g><g><title>[libc.so.6] (2,232 samples, 10.19%)</title><rect x="46.7230%" y="213" width="10.1941%" height="15" fill="rgb(217,163,10)" fg:x="10230" fg:w="2232"/><text x="46.9730%" y="223.50">[libc.so.6]</text></g><g><title>chess::make_move::aux (98 samples, 0.45%)</title><rect x="56.9171%" y="213" width="0.4476%" height="15" fill="rgb(213,25,53)" fg:x="12462" fg:w="98"/><text x="57.1671%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (24 samples, 0.11%)</title><rect x="59.2510%" y="197" width="0.1096%" height="15" fill="rgb(252,105,26)" fg:x="12973" fg:w="24"/><text x="59.5010%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (5 samples, 0.02%)</title><rect x="59.3377%" y="181" width="0.0228%" height="15" fill="rgb(220,39,43)" fg:x="12992" fg:w="5"/><text x="59.5877%" y="191.50"></text></g><g><title>[libc.so.6] (956 samples, 4.37%)</title><rect x="59.3606%" y="197" width="4.3663%" height="15" fill="rgb(229,68,48)" fg:x="12997" fg:w="956"/><text x="59.6106%" y="207.50">[libc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (16 samples, 0.07%)</title><rect x="64.1927%" y="181" width="0.0731%" height="15" fill="rgb(252,8,32)" fg:x="14055" fg:w="16"/><text x="64.4427%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (165 samples, 0.75%)</title><rect x="63.7269%" y="197" width="0.7536%" height="15" fill="rgb(223,20,43)" fg:x="13953" fg:w="165"/><text x="63.9769%" y="207.50"></text></g><g><title>core::ptr::write (47 samples, 0.21%)</title><rect x="64.2658%" y="181" width="0.2147%" height="15" fill="rgb(229,81,49)" fg:x="14071" fg:w="47"/><text x="64.5158%" y="191.50"></text></g><g><title>[libc.so.6] (5 samples, 0.02%)</title><rect x="64.5810%" y="181" width="0.0228%" height="15" fill="rgb(236,28,36)" fg:x="14140" fg:w="5"/><text x="64.8310%" y="191.50"></text></g><g><title>chess::piece::PieceList::remove (28 samples, 0.13%)</title><rect x="64.4805%" y="197" width="0.1279%" height="15" fill="rgb(249,185,26)" fg:x="14118" fg:w="28"/><text x="64.7305%" y="207.50"></text></g><g><title>core::num::&lt;impl i8&gt;::abs (20 samples, 0.09%)</title><rect x="64.6084%" y="197" width="0.0913%" height="15" fill="rgb(249,174,33)" fg:x="14146" fg:w="20"/><text x="64.8584%" y="207.50"></text></g><g><title>chess::make_move::update_game_state (1,614 samples, 7.37%)</title><rect x="57.3647%" y="213" width="7.3715%" height="15" fill="rgb(233,201,37)" fg:x="12560" fg:w="1614"/><text x="57.6147%" y="223.50">chess::mak..</text></g><g><title>core::slice::&lt;impl [T]&gt;::last (8 samples, 0.04%)</title><rect x="64.6997%" y="197" width="0.0365%" height="15" fill="rgb(221,78,26)" fg:x="14166" fg:w="8"/><text x="64.9497%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (45 samples, 0.21%)</title><rect x="67.3624%" y="197" width="0.2055%" height="15" fill="rgb(250,127,30)" fg:x="14749" fg:w="45"/><text x="67.6124%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (45 samples, 0.21%)</title><rect x="67.3624%" y="181" width="0.2055%" height="15" fill="rgb(230,49,44)" fg:x="14749" fg:w="45"/><text x="67.6124%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (45 samples, 0.21%)</title><rect x="67.3624%" y="165" width="0.2055%" height="15" fill="rgb(229,67,23)" fg:x="14749" fg:w="45"/><text x="67.6124%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (99 samples, 0.45%)</title><rect x="67.5679%" y="181" width="0.4522%" height="15" fill="rgb(249,83,47)" fg:x="14794" fg:w="99"/><text x="67.8179%" y="191.50"></text></g><g><title>chess::piece::PieceList::make_move (722 samples, 3.30%)</title><rect x="64.7362%" y="213" width="3.2976%" height="15" fill="rgb(215,43,3)" fg:x="14174" fg:w="722"/><text x="64.9862%" y="223.50">che..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (102 samples, 0.47%)</title><rect x="67.5679%" y="197" width="0.4659%" height="15" fill="rgb(238,154,13)" fg:x="14794" fg:w="102"/><text x="67.8179%" y="207.50"></text></g><g><title>chess::piece::PieceList::make_move (3 samples, 0.01%)</title><rect x="68.0201%" y="181" width="0.0137%" height="15" fill="rgb(219,56,2)" fg:x="14893" fg:w="3"/><text x="68.2701%" y="191.50"></text></g><g><title>chess::make_move::make_move (5,983 samples, 27.33%)</title><rect x="40.7582%" y="245" width="27.3259%" height="15" fill="rgb(233,0,4)" fg:x="8924" fg:w="5983"/><text x="41.0082%" y="255.50">chess::make_move::make_move</text></g><g><title>chess::make_move::aux (5,205 samples, 23.77%)</title><rect x="44.3115%" y="229" width="23.7726%" height="15" fill="rgb(235,30,7)" fg:x="9702" fg:w="5205"/><text x="44.5615%" y="239.50">chess::make_move::aux</text></g><g><title>core::slice::&lt;impl [T]&gt;::last (11 samples, 0.05%)</title><rect x="68.0338%" y="213" width="0.0502%" height="15" fill="rgb(250,79,13)" fg:x="14896" fg:w="11"/><text x="68.2838%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.02%)</title><rect x="68.3626%" y="229" width="0.0228%" height="15" fill="rgb(211,146,34)" fg:x="14968" fg:w="5"/><text x="68.6126%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (4 samples, 0.02%)</title><rect x="68.3672%" y="213" width="0.0183%" height="15" fill="rgb(228,22,38)" fg:x="14969" fg:w="4"/><text x="68.6172%" y="223.50"></text></g><g><title>[libc.so.6] (43 samples, 0.20%)</title><rect x="68.3855%" y="229" width="0.1964%" height="15" fill="rgb(235,168,5)" fg:x="14973" fg:w="43"/><text x="68.6355%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (6 samples, 0.03%)</title><rect x="68.6686%" y="165" width="0.0274%" height="15" fill="rgb(221,155,16)" fg:x="15035" fg:w="6"/><text x="68.9186%" y="175.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (21 samples, 0.10%)</title><rect x="68.7280%" y="133" width="0.0959%" height="15" fill="rgb(215,215,53)" fg:x="15048" fg:w="21"/><text x="68.9780%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (5 samples, 0.02%)</title><rect x="68.8239%" y="133" width="0.0228%" height="15" fill="rgb(223,4,10)" fg:x="15069" fg:w="5"/><text x="69.0739%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.01%)</title><rect x="68.8468%" y="133" width="0.0137%" height="15" fill="rgb(234,103,6)" fg:x="15074" fg:w="3"/><text x="69.0968%" y="143.50"></text></g><g><title>__rdl_realloc (9 samples, 0.04%)</title><rect x="68.9564%" y="69" width="0.0411%" height="15" fill="rgb(227,97,0)" fg:x="15098" fg:w="9"/><text x="69.2064%" y="79.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (4 samples, 0.02%)</title><rect x="68.9792%" y="53" width="0.0183%" height="15" fill="rgb(234,150,53)" fg:x="15103" fg:w="4"/><text x="69.2292%" y="63.50"></text></g><g><title>__rust_realloc (4 samples, 0.02%)</title><rect x="68.9975%" y="69" width="0.0183%" height="15" fill="rgb(228,201,54)" fg:x="15107" fg:w="4"/><text x="69.2475%" y="79.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (296 samples, 1.35%)</title><rect x="68.9381%" y="117" width="1.3519%" height="15" fill="rgb(222,22,37)" fg:x="15094" fg:w="296"/><text x="69.1881%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (296 samples, 1.35%)</title><rect x="68.9381%" y="101" width="1.3519%" height="15" fill="rgb(237,53,32)" fg:x="15094" fg:w="296"/><text x="69.1881%" y="111.50"></text></g><g><title>alloc::alloc::realloc (294 samples, 1.34%)</title><rect x="68.9472%" y="85" width="1.3428%" height="15" fill="rgb(233,25,53)" fg:x="15096" fg:w="294"/><text x="69.1972%" y="95.50"></text></g><g><title>realloc (279 samples, 1.27%)</title><rect x="69.0158%" y="69" width="1.2743%" height="15" fill="rgb(210,40,34)" fg:x="15111" fg:w="279"/><text x="69.2658%" y="79.50"></text></g><g><title>[libc.so.6] (233 samples, 1.06%)</title><rect x="69.2259%" y="53" width="1.0642%" height="15" fill="rgb(241,220,44)" fg:x="15157" fg:w="233"/><text x="69.4759%" y="63.50"></text></g><g><title>[libc.so.6] (181 samples, 0.83%)</title><rect x="69.4633%" y="37" width="0.8267%" height="15" fill="rgb(235,28,35)" fg:x="15209" fg:w="181"/><text x="69.7133%" y="47.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (5 samples, 0.02%)</title><rect x="70.2946%" y="117" width="0.0228%" height="15" fill="rgb(210,56,17)" fg:x="15391" fg:w="5"/><text x="70.5446%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (354 samples, 1.62%)</title><rect x="68.8605%" y="133" width="1.6168%" height="15" fill="rgb(224,130,29)" fg:x="15077" fg:w="354"/><text x="69.1105%" y="143.50"></text></g><g><title>malloc (35 samples, 0.16%)</title><rect x="70.3174%" y="117" width="0.1599%" height="15" fill="rgb(235,212,8)" fg:x="15396" fg:w="35"/><text x="70.5674%" y="127.50"></text></g><g><title>core::alloc::layout::Layout::array (12 samples, 0.05%)</title><rect x="70.4773%" y="133" width="0.0548%" height="15" fill="rgb(223,33,50)" fg:x="15431" fg:w="12"/><text x="70.7273%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (11 samples, 0.05%)</title><rect x="70.4818%" y="117" width="0.0502%" height="15" fill="rgb(219,149,13)" fg:x="15432" fg:w="11"/><text x="70.7318%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (11 samples, 0.05%)</title><rect x="70.4818%" y="101" width="0.0502%" height="15" fill="rgb(250,156,29)" fg:x="15432" fg:w="11"/><text x="70.7318%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (410 samples, 1.87%)</title><rect x="68.6960%" y="149" width="1.8726%" height="15" fill="rgb(216,193,19)" fg:x="15041" fg:w="410"/><text x="68.9460%" y="159.50">a..</text></g><g><title>core::cmp::max (8 samples, 0.04%)</title><rect x="70.5321%" y="133" width="0.0365%" height="15" fill="rgb(216,135,14)" fg:x="15443" fg:w="8"/><text x="70.7821%" y="143.50"></text></g><g><title>core::cmp::Ord::max (8 samples, 0.04%)</title><rect x="70.5321%" y="117" width="0.0365%" height="15" fill="rgb(241,47,5)" fg:x="15443" fg:w="8"/><text x="70.7821%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 0.04%)</title><rect x="70.5321%" y="101" width="0.0365%" height="15" fill="rgb(233,42,35)" fg:x="15443" fg:w="8"/><text x="70.7821%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (426 samples, 1.95%)</title><rect x="68.6275%" y="197" width="1.9456%" height="15" fill="rgb(231,13,6)" fg:x="15026" fg:w="426"/><text x="68.8775%" y="207.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (423 samples, 1.93%)</title><rect x="68.6412%" y="181" width="1.9319%" height="15" fill="rgb(207,181,40)" fg:x="15029" fg:w="423"/><text x="68.8912%" y="191.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (411 samples, 1.88%)</title><rect x="68.6960%" y="165" width="1.8771%" height="15" fill="rgb(254,173,49)" fg:x="15041" fg:w="411"/><text x="68.9460%" y="175.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (521 samples, 2.38%)</title><rect x="68.5864%" y="213" width="2.3795%" height="15" fill="rgb(221,1,38)" fg:x="15017" fg:w="521"/><text x="68.8364%" y="223.50">al..</text></g><g><title>core::intrinsics::copy_nonoverlapping (86 samples, 0.39%)</title><rect x="70.5732%" y="197" width="0.3928%" height="15" fill="rgb(206,124,46)" fg:x="15452" fg:w="86"/><text x="70.8232%" y="207.50"></text></g><g><title>[libc.so.6] (65 samples, 0.30%)</title><rect x="70.6691%" y="181" width="0.2969%" height="15" fill="rgb(249,21,11)" fg:x="15473" fg:w="65"/><text x="70.9191%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (5 samples, 0.02%)</title><rect x="70.9660%" y="213" width="0.0228%" height="15" fill="rgb(222,201,40)" fg:x="15538" fg:w="5"/><text x="71.2160%" y="223.50"></text></g><g><title>chess::move_gen::move_gen (3 samples, 0.01%)</title><rect x="70.9751%" y="197" width="0.0137%" height="15" fill="rgb(235,61,29)" fg:x="15540" fg:w="3"/><text x="71.2251%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (529 samples, 2.42%)</title><rect x="68.5864%" y="229" width="2.4161%" height="15" fill="rgb(219,207,3)" fg:x="15017" fg:w="529"/><text x="68.8364%" y="239.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (3 samples, 0.01%)</title><rect x="70.9888%" y="213" width="0.0137%" height="15" fill="rgb(222,56,46)" fg:x="15543" fg:w="3"/><text x="71.2388%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (6 samples, 0.03%)</title><rect x="71.0025%" y="229" width="0.0274%" height="15" fill="rgb(239,76,54)" fg:x="15546" fg:w="6"/><text x="71.2525%" y="239.50"></text></g><g><title>chess::attack_gen::attack_gen (52 samples, 0.24%)</title><rect x="71.1852%" y="213" width="0.2375%" height="15" fill="rgb(231,124,27)" fg:x="15586" fg:w="52"/><text x="71.4352%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.04%)</title><rect x="72.3179%" y="197" width="0.0365%" height="15" fill="rgb(249,195,6)" fg:x="15834" fg:w="8"/><text x="72.5679%" y="207.50"></text></g><g><title>&lt;i8 as core::ops::arith::Add&lt;&amp;i8&gt;&gt;::add (11 samples, 0.05%)</title><rect x="72.3544%" y="197" width="0.0502%" height="15" fill="rgb(237,174,47)" fg:x="15842" fg:w="11"/><text x="72.6044%" y="207.50"></text></g><g><title>&lt;i8 as core::ops::arith::Add&gt;::add (11 samples, 0.05%)</title><rect x="72.3544%" y="181" width="0.0502%" height="15" fill="rgb(206,201,31)" fg:x="15842" fg:w="11"/><text x="72.6044%" y="191.50"></text></g><g><title>chess::attack_gen::direction_sliding (220 samples, 1.00%)</title><rect x="71.4227%" y="213" width="1.0048%" height="15" fill="rgb(231,57,52)" fg:x="15638" fg:w="220"/><text x="71.6727%" y="223.50"></text></g><g><title>chess::attack_gen::attack_gen (4 samples, 0.02%)</title><rect x="72.4092%" y="197" width="0.0183%" height="15" fill="rgb(248,177,22)" fg:x="15854" fg:w="4"/><text x="72.6592%" y="207.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (3 samples, 0.01%)</title><rect x="72.6787%" y="197" width="0.0137%" height="15" fill="rgb(215,211,37)" fg:x="15913" fg:w="3"/><text x="72.9287%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.11%)</title><rect x="72.6924%" y="197" width="0.1142%" height="15" fill="rgb(241,128,51)" fg:x="15916" fg:w="25"/><text x="72.9424%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.04%)</title><rect x="72.7655%" y="181" width="0.0411%" height="15" fill="rgb(227,165,31)" fg:x="15932" fg:w="9"/><text x="73.0155%" y="191.50"></text></g><g><title>&lt;i8 as core::ops::arith::Add&lt;&amp;i8&gt;&gt;::add (9 samples, 0.04%)</title><rect x="72.8157%" y="197" width="0.0411%" height="15" fill="rgb(228,167,24)" fg:x="15943" fg:w="9"/><text x="73.0657%" y="207.50"></text></g><g><title>&lt;i8 as core::ops::arith::Add&gt;::add (9 samples, 0.04%)</title><rect x="72.8157%" y="181" width="0.0411%" height="15" fill="rgb(228,143,12)" fg:x="15943" fg:w="9"/><text x="73.0657%" y="191.50"></text></g><g><title>chess::attack_gen::king_moves (100 samples, 0.46%)</title><rect x="72.4275%" y="213" width="0.4567%" height="15" fill="rgb(249,149,8)" fg:x="15858" fg:w="100"/><text x="72.6775%" y="223.50"></text></g><g><title>chess::attack_gen::attack_gen (6 samples, 0.03%)</title><rect x="72.8568%" y="197" width="0.0274%" height="15" fill="rgb(243,35,44)" fg:x="15952" fg:w="6"/><text x="73.1068%" y="207.50"></text></g><g><title>chess::attack_gen::knight_moves (78 samples, 0.36%)</title><rect x="72.8842%" y="213" width="0.3562%" height="15" fill="rgb(246,89,9)" fg:x="15958" fg:w="78"/><text x="73.1342%" y="223.50"></text></g><g><title>chess::attack_gen::attack_gen (3 samples, 0.01%)</title><rect x="73.2268%" y="197" width="0.0137%" height="15" fill="rgb(233,213,13)" fg:x="16033" fg:w="3"/><text x="73.4768%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.02%)</title><rect x="73.6652%" y="197" width="0.0228%" height="15" fill="rgb(233,141,41)" fg:x="16129" fg:w="5"/><text x="73.9152%" y="207.50"></text></g><g><title>chess::attack_gen::attack_gen (583 samples, 2.66%)</title><rect x="71.0299%" y="229" width="2.6627%" height="15" fill="rgb(239,167,4)" fg:x="15552" fg:w="583"/><text x="71.2799%" y="239.50">ch..</text></g><g><title>chess::attack_gen::pawn_moves (99 samples, 0.45%)</title><rect x="73.2405%" y="213" width="0.4522%" height="15" fill="rgb(209,217,16)" fg:x="16036" fg:w="99"/><text x="73.4905%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.16%)</title><rect x="74.9166%" y="213" width="0.1644%" height="15" fill="rgb(219,88,35)" fg:x="16403" fg:w="36"/><text x="75.1666%" y="223.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (6 samples, 0.03%)</title><rect x="75.0537%" y="197" width="0.0274%" height="15" fill="rgb(220,193,23)" fg:x="16433" fg:w="6"/><text x="75.3037%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.02%)</title><rect x="75.0628%" y="181" width="0.0183%" height="15" fill="rgb(230,90,52)" fg:x="16435" fg:w="4"/><text x="75.3128%" y="191.50"></text></g><g><title>&lt;i8 as core::ops::arith::Add&lt;&amp;i8&gt;&gt;::add (6 samples, 0.03%)</title><rect x="75.0811%" y="213" width="0.0274%" height="15" fill="rgb(252,106,19)" fg:x="16439" fg:w="6"/><text x="75.3311%" y="223.50"></text></g><g><title>&lt;i8 as core::ops::arith::Add&gt;::add (6 samples, 0.03%)</title><rect x="75.0811%" y="197" width="0.0274%" height="15" fill="rgb(206,74,20)" fg:x="16439" fg:w="6"/><text x="75.3311%" y="207.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (7 samples, 0.03%)</title><rect x="75.1587%" y="165" width="0.0320%" height="15" fill="rgb(230,138,44)" fg:x="16456" fg:w="7"/><text x="75.4087%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.02%)</title><rect x="75.1953%" y="165" width="0.0183%" height="15" fill="rgb(235,182,43)" fg:x="16464" fg:w="4"/><text x="75.4453%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (36 samples, 0.16%)</title><rect x="75.2683%" y="149" width="0.1644%" height="15" fill="rgb(242,16,51)" fg:x="16480" fg:w="36"/><text x="75.5183%" y="159.50"></text></g><g><title>alloc::alloc::Global::grow_impl (36 samples, 0.16%)</title><rect x="75.2683%" y="133" width="0.1644%" height="15" fill="rgb(248,9,4)" fg:x="16480" fg:w="36"/><text x="75.5183%" y="143.50"></text></g><g><title>alloc::alloc::realloc (36 samples, 0.16%)</title><rect x="75.2683%" y="117" width="0.1644%" height="15" fill="rgb(210,31,22)" fg:x="16480" fg:w="36"/><text x="75.5183%" y="127.50"></text></g><g><title>realloc (35 samples, 0.16%)</title><rect x="75.2729%" y="101" width="0.1599%" height="15" fill="rgb(239,54,39)" fg:x="16481" fg:w="35"/><text x="75.5229%" y="111.50"></text></g><g><title>[libc.so.6] (32 samples, 0.15%)</title><rect x="75.2866%" y="85" width="0.1462%" height="15" fill="rgb(230,99,41)" fg:x="16484" fg:w="32"/><text x="75.5366%" y="95.50"></text></g><g><title>[libc.so.6] (26 samples, 0.12%)</title><rect x="75.3140%" y="69" width="0.1187%" height="15" fill="rgb(253,106,12)" fg:x="16490" fg:w="26"/><text x="75.5640%" y="79.50"></text></g><g><title>__rdl_alloc (6 samples, 0.03%)</title><rect x="75.4327%" y="149" width="0.0274%" height="15" fill="rgb(213,46,41)" fg:x="16516" fg:w="6"/><text x="75.6827%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.03%)</title><rect x="75.4327%" y="133" width="0.0274%" height="15" fill="rgb(215,133,35)" fg:x="16516" fg:w="6"/><text x="75.6827%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (88 samples, 0.40%)</title><rect x="75.2181%" y="165" width="0.4019%" height="15" fill="rgb(213,28,5)" fg:x="16469" fg:w="88"/><text x="75.4681%" y="175.50"></text></g><g><title>malloc (33 samples, 0.15%)</title><rect x="75.4693%" y="149" width="0.1507%" height="15" fill="rgb(215,77,49)" fg:x="16524" fg:w="33"/><text x="75.7193%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::array (5 samples, 0.02%)</title><rect x="75.6200%" y="165" width="0.0228%" height="15" fill="rgb(248,100,22)" fg:x="16557" fg:w="5"/><text x="75.8700%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (5 samples, 0.02%)</title><rect x="75.6200%" y="149" width="0.0228%" height="15" fill="rgb(208,67,9)" fg:x="16557" fg:w="5"/><text x="75.8700%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (5 samples, 0.02%)</title><rect x="75.6200%" y="133" width="0.0228%" height="15" fill="rgb(219,133,21)" fg:x="16557" fg:w="5"/><text x="75.8700%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (119 samples, 0.54%)</title><rect x="75.1450%" y="197" width="0.5435%" height="15" fill="rgb(246,46,29)" fg:x="16453" fg:w="119"/><text x="75.3950%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (119 samples, 0.54%)</title><rect x="75.1450%" y="181" width="0.5435%" height="15" fill="rgb(246,185,52)" fg:x="16453" fg:w="119"/><text x="75.3950%" y="191.50"></text></g><g><title>core::cmp::max (10 samples, 0.05%)</title><rect x="75.6428%" y="165" width="0.0457%" height="15" fill="rgb(252,136,11)" fg:x="16562" fg:w="10"/><text x="75.8928%" y="175.50"></text></g><g><title>core::cmp::Ord::max (10 samples, 0.05%)</title><rect x="75.6428%" y="149" width="0.0457%" height="15" fill="rgb(219,138,53)" fg:x="16562" fg:w="10"/><text x="75.8928%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10 samples, 0.05%)</title><rect x="75.6428%" y="133" width="0.0457%" height="15" fill="rgb(211,51,23)" fg:x="16562" fg:w="10"/><text x="75.8928%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.01%)</title><rect x="75.6885%" y="197" width="0.0137%" height="15" fill="rgb(247,221,28)" fg:x="16572" fg:w="3"/><text x="75.9385%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (154 samples, 0.70%)</title><rect x="75.1176%" y="213" width="0.7034%" height="15" fill="rgb(251,222,45)" fg:x="16447" fg:w="154"/><text x="75.3676%" y="223.50"></text></g><g><title>core::ptr::write (24 samples, 0.11%)</title><rect x="75.7113%" y="197" width="0.1096%" height="15" fill="rgb(217,162,53)" fg:x="16577" fg:w="24"/><text x="75.9613%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (6 samples, 0.03%)</title><rect x="75.8210%" y="213" width="0.0274%" height="15" fill="rgb(229,93,14)" fg:x="16601" fg:w="6"/><text x="76.0710%" y="223.50"></text></g><g><title>chess::move_gen::direction_sliding (25 samples, 0.11%)</title><rect x="75.8484%" y="213" width="0.1142%" height="15" fill="rgb(209,67,49)" fg:x="16607" fg:w="25"/><text x="76.0984%" y="223.50"></text></g><g><title>chess::move_gen::direction_sliding (498 samples, 2.27%)</title><rect x="73.6926%" y="229" width="2.2745%" height="15" fill="rgb(213,87,29)" fg:x="16135" fg:w="498"/><text x="73.9426%" y="239.50">c..</text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.10%)</title><rect x="76.4421%" y="213" width="0.1005%" height="15" fill="rgb(205,151,52)" fg:x="16737" fg:w="22"/><text x="76.6921%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.03%)</title><rect x="76.5152%" y="197" width="0.0274%" height="15" fill="rgb(253,215,39)" fg:x="16753" fg:w="6"/><text x="76.7652%" y="207.50"></text></g><g><title>&lt;i8 as core::ops::arith::Add&lt;&amp;i8&gt;&gt;::add (5 samples, 0.02%)</title><rect x="76.5426%" y="213" width="0.0228%" height="15" fill="rgb(221,220,41)" fg:x="16759" fg:w="5"/><text x="76.7926%" y="223.50"></text></g><g><title>&lt;i8 as core::ops::arith::Add&gt;::add (5 samples, 0.02%)</title><rect x="76.5426%" y="197" width="0.0228%" height="15" fill="rgb(218,133,21)" fg:x="16759" fg:w="5"/><text x="76.7926%" y="207.50"></text></g><g><title>[libc.so.6] (24 samples, 0.11%)</title><rect x="76.5654%" y="213" width="0.1096%" height="15" fill="rgb(221,193,43)" fg:x="16764" fg:w="24"/><text x="76.8154%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (3 samples, 0.01%)</title><rect x="76.6796%" y="213" width="0.0137%" height="15" fill="rgb(240,128,52)" fg:x="16789" fg:w="3"/><text x="76.9296%" y="223.50"></text></g><g><title>chess::move_gen::get_line (4 samples, 0.02%)</title><rect x="76.6933%" y="213" width="0.0183%" height="15" fill="rgb(253,114,12)" fg:x="16792" fg:w="4"/><text x="76.9433%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.01%)</title><rect x="76.6979%" y="197" width="0.0137%" height="15" fill="rgb(215,223,47)" fg:x="16793" fg:w="3"/><text x="76.9479%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.01%)</title><rect x="76.6979%" y="181" width="0.0137%" height="15" fill="rgb(248,225,23)" fg:x="16793" fg:w="3"/><text x="76.9479%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.01%)</title><rect x="76.6979%" y="165" width="0.0137%" height="15" fill="rgb(250,108,0)" fg:x="16793" fg:w="3"/><text x="76.9479%" y="175.50"></text></g><g><title>chess::move_gen::move_gen (6 samples, 0.03%)</title><rect x="76.7116%" y="213" width="0.0274%" height="15" fill="rgb(228,208,7)" fg:x="16796" fg:w="6"/><text x="76.9616%" y="223.50"></text></g><g><title>chess::move_gen::pawn_moves (5 samples, 0.02%)</title><rect x="76.7390%" y="213" width="0.0228%" height="15" fill="rgb(244,45,10)" fg:x="16802" fg:w="5"/><text x="76.9890%" y="223.50"></text></g><g><title>chess::piece::PieceList::new (8 samples, 0.04%)</title><rect x="76.7710%" y="213" width="0.0365%" height="15" fill="rgb(207,125,25)" fg:x="16809" fg:w="8"/><text x="77.0210%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (3 samples, 0.01%)</title><rect x="76.7938%" y="197" width="0.0137%" height="15" fill="rgb(210,195,18)" fg:x="16814" fg:w="3"/><text x="77.0438%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (14 samples, 0.06%)</title><rect x="76.8075%" y="213" width="0.0639%" height="15" fill="rgb(249,80,12)" fg:x="16817" fg:w="14"/><text x="77.0575%" y="223.50"></text></g><g><title>chess::move_gen::get_pinned_pieces (198 samples, 0.90%)</title><rect x="75.9717%" y="229" width="0.9043%" height="15" fill="rgb(221,65,9)" fg:x="16634" fg:w="198"/><text x="76.2217%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.12%)</title><rect x="77.1592%" y="213" width="0.1187%" height="15" fill="rgb(235,49,36)" fg:x="16894" fg:w="26"/><text x="77.4092%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.04%)</title><rect x="77.2414%" y="197" width="0.0365%" height="15" fill="rgb(225,32,20)" fg:x="16912" fg:w="8"/><text x="77.4914%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (18 samples, 0.08%)</title><rect x="77.3008%" y="165" width="0.0822%" height="15" fill="rgb(215,141,46)" fg:x="16925" fg:w="18"/><text x="77.5508%" y="175.50"></text></g><g><title>malloc (13 samples, 0.06%)</title><rect x="77.3236%" y="149" width="0.0594%" height="15" fill="rgb(250,160,47)" fg:x="16930" fg:w="13"/><text x="77.5736%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::array (3 samples, 0.01%)</title><rect x="77.3830%" y="165" width="0.0137%" height="15" fill="rgb(216,222,40)" fg:x="16943" fg:w="3"/><text x="77.6330%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (25 samples, 0.11%)</title><rect x="77.2871%" y="213" width="0.1142%" height="15" fill="rgb(234,217,39)" fg:x="16922" fg:w="25"/><text x="77.5371%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (23 samples, 0.11%)</title><rect x="77.2962%" y="197" width="0.1050%" height="15" fill="rgb(207,178,40)" fg:x="16924" fg:w="23"/><text x="77.5462%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (23 samples, 0.11%)</title><rect x="77.2962%" y="181" width="0.1050%" height="15" fill="rgb(221,136,13)" fg:x="16924" fg:w="23"/><text x="77.5462%" y="191.50"></text></g><g><title>chess::move_gen::king_moves (125 samples, 0.57%)</title><rect x="76.8760%" y="229" width="0.5709%" height="15" fill="rgb(249,199,10)" fg:x="16832" fg:w="125"/><text x="77.1260%" y="239.50"></text></g><g><title>chess::move_gen::move_gen (8 samples, 0.04%)</title><rect x="77.4104%" y="213" width="0.0365%" height="15" fill="rgb(249,222,13)" fg:x="16949" fg:w="8"/><text x="77.6604%" y="223.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.12%)</title><rect x="78.2096%" y="213" width="0.1187%" height="15" fill="rgb(244,185,38)" fg:x="17124" fg:w="26"/><text x="78.4596%" y="223.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (26 samples, 0.12%)</title><rect x="78.2096%" y="197" width="0.1187%" height="15" fill="rgb(236,202,9)" fg:x="17124" fg:w="26"/><text x="78.4596%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (26 samples, 0.12%)</title><rect x="78.2096%" y="181" width="0.1187%" height="15" fill="rgb(250,229,37)" fg:x="17124" fg:w="26"/><text x="78.4596%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (22 samples, 0.10%)</title><rect x="78.2279%" y="165" width="0.1005%" height="15" fill="rgb(206,174,23)" fg:x="17128" fg:w="22"/><text x="78.4779%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.03%)</title><rect x="78.3284%" y="213" width="0.0274%" height="15" fill="rgb(211,33,43)" fg:x="17150" fg:w="6"/><text x="78.5784%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.02%)</title><rect x="78.3832%" y="165" width="0.0183%" height="15" fill="rgb(245,58,50)" fg:x="17162" fg:w="4"/><text x="78.6332%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (39 samples, 0.18%)</title><rect x="78.4197%" y="149" width="0.1781%" height="15" fill="rgb(244,68,36)" fg:x="17170" fg:w="39"/><text x="78.6697%" y="159.50"></text></g><g><title>alloc::alloc::Global::grow_impl (39 samples, 0.18%)</title><rect x="78.4197%" y="133" width="0.1781%" height="15" fill="rgb(232,229,15)" fg:x="17170" fg:w="39"/><text x="78.6697%" y="143.50"></text></g><g><title>alloc::alloc::realloc (39 samples, 0.18%)</title><rect x="78.4197%" y="117" width="0.1781%" height="15" fill="rgb(254,30,23)" fg:x="17170" fg:w="39"/><text x="78.6697%" y="127.50"></text></g><g><title>realloc (36 samples, 0.16%)</title><rect x="78.4334%" y="101" width="0.1644%" height="15" fill="rgb(235,160,14)" fg:x="17173" fg:w="36"/><text x="78.6834%" y="111.50"></text></g><g><title>[libc.so.6] (31 samples, 0.14%)</title><rect x="78.4563%" y="85" width="0.1416%" height="15" fill="rgb(212,155,44)" fg:x="17178" fg:w="31"/><text x="78.7063%" y="95.50"></text></g><g><title>[libc.so.6] (22 samples, 0.10%)</title><rect x="78.4974%" y="69" width="0.1005%" height="15" fill="rgb(226,2,50)" fg:x="17187" fg:w="22"/><text x="78.7474%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (54 samples, 0.25%)</title><rect x="78.4060%" y="165" width="0.2466%" height="15" fill="rgb(234,177,6)" fg:x="17167" fg:w="54"/><text x="78.6560%" y="175.50"></text></g><g><title>malloc (9 samples, 0.04%)</title><rect x="78.6116%" y="149" width="0.0411%" height="15" fill="rgb(217,24,9)" fg:x="17212" fg:w="9"/><text x="78.8616%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (73 samples, 0.33%)</title><rect x="78.3558%" y="213" width="0.3334%" height="15" fill="rgb(220,13,46)" fg:x="17156" fg:w="73"/><text x="78.6058%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (71 samples, 0.32%)</title><rect x="78.3649%" y="197" width="0.3243%" height="15" fill="rgb(239,221,27)" fg:x="17158" fg:w="71"/><text x="78.6149%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (71 samples, 0.32%)</title><rect x="78.3649%" y="181" width="0.3243%" height="15" fill="rgb(222,198,25)" fg:x="17158" fg:w="71"/><text x="78.6149%" y="191.50"></text></g><g><title>core::cmp::max (6 samples, 0.03%)</title><rect x="78.6618%" y="165" width="0.0274%" height="15" fill="rgb(211,99,13)" fg:x="17223" fg:w="6"/><text x="78.9118%" y="175.50"></text></g><g><title>core::cmp::Ord::max (6 samples, 0.03%)</title><rect x="78.6618%" y="149" width="0.0274%" height="15" fill="rgb(232,111,31)" fg:x="17223" fg:w="6"/><text x="78.9118%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.03%)</title><rect x="78.6618%" y="133" width="0.0274%" height="15" fill="rgb(245,82,37)" fg:x="17223" fg:w="6"/><text x="78.9118%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (3 samples, 0.01%)</title><rect x="78.6892%" y="213" width="0.0137%" height="15" fill="rgb(227,149,46)" fg:x="17229" fg:w="3"/><text x="78.9392%" y="223.50"></text></g><g><title>chess::move_gen::knight_moves (277 samples, 1.27%)</title><rect x="77.4469%" y="229" width="1.2651%" height="15" fill="rgb(218,36,50)" fg:x="16957" fg:w="277"/><text x="77.6969%" y="239.50"></text></g><g><title>chess::move_gen::move_gen (65 samples, 0.30%)</title><rect x="78.7120%" y="229" width="0.2969%" height="15" fill="rgb(226,80,48)" fg:x="17234" fg:w="65"/><text x="78.9620%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (4 samples, 0.02%)</title><rect x="80.4339%" y="213" width="0.0183%" height="15" fill="rgb(238,224,15)" fg:x="17611" fg:w="4"/><text x="80.6839%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (11 samples, 0.05%)</title><rect x="80.6120%" y="165" width="0.0502%" height="15" fill="rgb(241,136,10)" fg:x="17650" fg:w="11"/><text x="80.8620%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (8 samples, 0.04%)</title><rect x="80.6623%" y="165" width="0.0365%" height="15" fill="rgb(208,32,45)" fg:x="17661" fg:w="8"/><text x="80.9123%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.02%)</title><rect x="80.6988%" y="165" width="0.0183%" height="15" fill="rgb(207,135,9)" fg:x="17669" fg:w="4"/><text x="80.9488%" y="175.50"></text></g><g><title>__rdl_realloc (5 samples, 0.02%)</title><rect x="80.7901%" y="101" width="0.0228%" height="15" fill="rgb(206,86,44)" fg:x="17689" fg:w="5"/><text x="81.0401%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (4 samples, 0.02%)</title><rect x="80.7947%" y="85" width="0.0183%" height="15" fill="rgb(245,177,15)" fg:x="17690" fg:w="4"/><text x="81.0447%" y="95.50"></text></g><g><title>__rust_realloc (4 samples, 0.02%)</title><rect x="80.8130%" y="101" width="0.0183%" height="15" fill="rgb(206,64,50)" fg:x="17694" fg:w="4"/><text x="81.0630%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (186 samples, 0.85%)</title><rect x="80.7901%" y="149" width="0.8495%" height="15" fill="rgb(234,36,40)" fg:x="17689" fg:w="186"/><text x="81.0401%" y="159.50"></text></g><g><title>alloc::alloc::Global::grow_impl (186 samples, 0.85%)</title><rect x="80.7901%" y="133" width="0.8495%" height="15" fill="rgb(213,64,8)" fg:x="17689" fg:w="186"/><text x="81.0401%" y="143.50"></text></g><g><title>alloc::alloc::realloc (186 samples, 0.85%)</title><rect x="80.7901%" y="117" width="0.8495%" height="15" fill="rgb(210,75,36)" fg:x="17689" fg:w="186"/><text x="81.0401%" y="127.50"></text></g><g><title>realloc (177 samples, 0.81%)</title><rect x="80.8312%" y="101" width="0.8084%" height="15" fill="rgb(229,88,21)" fg:x="17698" fg:w="177"/><text x="81.0812%" y="111.50"></text></g><g><title>[libc.so.6] (147 samples, 0.67%)</title><rect x="80.9683%" y="85" width="0.6714%" height="15" fill="rgb(252,204,47)" fg:x="17728" fg:w="147"/><text x="81.2183%" y="95.50"></text></g><g><title>[libc.so.6] (111 samples, 0.51%)</title><rect x="81.1327%" y="69" width="0.5070%" height="15" fill="rgb(208,77,27)" fg:x="17764" fg:w="111"/><text x="81.3827%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (226 samples, 1.03%)</title><rect x="80.7171%" y="165" width="1.0322%" height="15" fill="rgb(221,76,26)" fg:x="17673" fg:w="226"/><text x="80.9671%" y="175.50"></text></g><g><title>malloc (21 samples, 0.10%)</title><rect x="81.6533%" y="149" width="0.0959%" height="15" fill="rgb(225,139,18)" fg:x="17878" fg:w="21"/><text x="81.9033%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::array (10 samples, 0.05%)</title><rect x="81.7493%" y="165" width="0.0457%" height="15" fill="rgb(230,137,11)" fg:x="17899" fg:w="10"/><text x="81.9993%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (7 samples, 0.03%)</title><rect x="81.7630%" y="149" width="0.0320%" height="15" fill="rgb(212,28,1)" fg:x="17902" fg:w="7"/><text x="82.0130%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (7 samples, 0.03%)</title><rect x="81.7630%" y="133" width="0.0320%" height="15" fill="rgb(248,164,17)" fg:x="17902" fg:w="7"/><text x="82.0130%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (275 samples, 1.26%)</title><rect x="80.5892%" y="197" width="1.2560%" height="15" fill="rgb(222,171,42)" fg:x="17645" fg:w="275"/><text x="80.8392%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (275 samples, 1.26%)</title><rect x="80.5892%" y="181" width="1.2560%" height="15" fill="rgb(243,84,45)" fg:x="17645" fg:w="275"/><text x="80.8392%" y="191.50"></text></g><g><title>core::cmp::max (11 samples, 0.05%)</title><rect x="81.7949%" y="165" width="0.0502%" height="15" fill="rgb(252,49,23)" fg:x="17909" fg:w="11"/><text x="82.0449%" y="175.50"></text></g><g><title>core::cmp::Ord::max (11 samples, 0.05%)</title><rect x="81.7949%" y="149" width="0.0502%" height="15" fill="rgb(215,19,7)" fg:x="17909" fg:w="11"/><text x="82.0449%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.05%)</title><rect x="81.7949%" y="133" width="0.0502%" height="15" fill="rgb(238,81,41)" fg:x="17909" fg:w="11"/><text x="82.0449%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.01%)</title><rect x="81.8543%" y="197" width="0.0137%" height="15" fill="rgb(210,199,37)" fg:x="17922" fg:w="3"/><text x="82.1043%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.01%)</title><rect x="81.8543%" y="181" width="0.0137%" height="15" fill="rgb(244,192,49)" fg:x="17922" fg:w="3"/><text x="82.1043%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (369 samples, 1.69%)</title><rect x="80.4522%" y="213" width="1.6853%" height="15" fill="rgb(226,211,11)" fg:x="17615" fg:w="369"/><text x="80.7022%" y="223.50"></text></g><g><title>core::ptr::write (59 samples, 0.27%)</title><rect x="81.8680%" y="197" width="0.2695%" height="15" fill="rgb(236,162,54)" fg:x="17925" fg:w="59"/><text x="82.1180%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (3 samples, 0.01%)</title><rect x="82.1375%" y="213" width="0.0137%" height="15" fill="rgb(220,229,9)" fg:x="17984" fg:w="3"/><text x="82.3875%" y="223.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (3 samples, 0.01%)</title><rect x="82.7404%" y="181" width="0.0137%" height="15" fill="rgb(250,87,22)" fg:x="18116" fg:w="3"/><text x="82.9904%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.05%)</title><rect x="82.7541%" y="181" width="0.0457%" height="15" fill="rgb(239,43,17)" fg:x="18119" fg:w="10"/><text x="83.0041%" y="191.50"></text></g><g><title>chess::attack_gen::direction_sliding (108 samples, 0.49%)</title><rect x="82.3110%" y="197" width="0.4933%" height="15" fill="rgb(231,177,25)" fg:x="18022" fg:w="108"/><text x="82.5610%" y="207.50"></text></g><g><title>chess::move_gen::discover_check (172 samples, 0.79%)</title><rect x="82.1512%" y="213" width="0.7856%" height="15" fill="rgb(219,179,1)" fg:x="17987" fg:w="172"/><text x="82.4012%" y="223.50"></text></g><g><title>chess::move_gen::discover_check (29 samples, 0.13%)</title><rect x="82.8043%" y="197" width="0.1325%" height="15" fill="rgb(238,219,53)" fg:x="18130" fg:w="29"/><text x="83.0543%" y="207.50"></text></g><g><title>chess::move_gen::pawn_moves (20 samples, 0.09%)</title><rect x="82.9459%" y="213" width="0.0913%" height="15" fill="rgb(232,167,36)" fg:x="18161" fg:w="20"/><text x="83.1959%" y="223.50"></text></g><g><title>chess::move_gen::pawn_moves (886 samples, 4.05%)</title><rect x="79.0089%" y="229" width="4.0466%" height="15" fill="rgb(244,19,51)" fg:x="17299" fg:w="886"/><text x="79.2589%" y="239.50">ches..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (18 samples, 0.08%)</title><rect x="83.1468%" y="213" width="0.0822%" height="15" fill="rgb(224,6,22)" fg:x="18205" fg:w="18"/><text x="83.3968%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4 samples, 0.02%)</title><rect x="83.2108%" y="197" width="0.0183%" height="15" fill="rgb(224,145,5)" fg:x="18219" fg:w="4"/><text x="83.4608%" y="207.50"></text></g><g><title>chess::piece::PieceList::add (41 samples, 0.19%)</title><rect x="83.0555%" y="229" width="0.1873%" height="15" fill="rgb(234,130,49)" fg:x="18185" fg:w="41"/><text x="83.3055%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;i8&gt;&gt; (3 samples, 0.01%)</title><rect x="83.2290%" y="213" width="0.0137%" height="15" fill="rgb(254,6,2)" fg:x="18223" fg:w="3"/><text x="83.4790%" y="223.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="83.2290%" y="197" width="0.0137%" height="15" fill="rgb(208,96,46)" fg:x="18223" fg:w="3"/><text x="83.4790%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;i8,alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="83.2290%" y="181" width="0.0137%" height="15" fill="rgb(239,3,39)" fg:x="18223" fg:w="3"/><text x="83.4790%" y="191.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="83.2290%" y="165" width="0.0137%" height="15" fill="rgb(233,210,1)" fg:x="18223" fg:w="3"/><text x="83.4790%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i8&gt;&gt; (3 samples, 0.01%)</title><rect x="83.2290%" y="149" width="0.0137%" height="15" fill="rgb(244,137,37)" fg:x="18223" fg:w="3"/><text x="83.4790%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="83.2290%" y="133" width="0.0137%" height="15" fill="rgb(240,136,2)" fg:x="18223" fg:w="3"/><text x="83.4790%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.04%)</title><rect x="83.2519%" y="213" width="0.0365%" height="15" fill="rgb(239,18,37)" fg:x="18228" fg:w="8"/><text x="83.5019%" y="223.50"></text></g><g><title>chess::piece::PieceList::diference (12 samples, 0.05%)</title><rect x="83.2427%" y="229" width="0.0548%" height="15" fill="rgb(218,185,22)" fg:x="18226" fg:w="12"/><text x="83.4927%" y="239.50"></text></g><g><title>__rdl_dealloc (5 samples, 0.02%)</title><rect x="83.3615%" y="149" width="0.0228%" height="15" fill="rgb(225,218,4)" fg:x="18252" fg:w="5"/><text x="83.6115%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (5 samples, 0.02%)</title><rect x="83.3615%" y="133" width="0.0228%" height="15" fill="rgb(230,182,32)" fg:x="18252" fg:w="5"/><text x="83.6115%" y="143.50"></text></g><g><title>__rust_dealloc (8 samples, 0.04%)</title><rect x="83.3843%" y="149" width="0.0365%" height="15" fill="rgb(242,56,43)" fg:x="18257" fg:w="8"/><text x="83.6343%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (114 samples, 0.52%)</title><rect x="83.3341%" y="181" width="0.5207%" height="15" fill="rgb(233,99,24)" fg:x="18246" fg:w="114"/><text x="83.5841%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (114 samples, 0.52%)</title><rect x="83.3341%" y="165" width="0.5207%" height="15" fill="rgb(234,209,42)" fg:x="18246" fg:w="114"/><text x="83.5841%" y="175.50"></text></g><g><title>free (95 samples, 0.43%)</title><rect x="83.4209%" y="149" width="0.4339%" height="15" fill="rgb(227,7,12)" fg:x="18265" fg:w="95"/><text x="83.6709%" y="159.50"></text></g><g><title>[libc.so.6] (53 samples, 0.24%)</title><rect x="83.6127%" y="133" width="0.2421%" height="15" fill="rgb(245,203,43)" fg:x="18307" fg:w="53"/><text x="83.8627%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chess::move_gen::Move&gt;&gt; (127 samples, 0.58%)</title><rect x="83.3067%" y="229" width="0.5800%" height="15" fill="rgb(238,205,33)" fg:x="18240" fg:w="127"/><text x="83.5567%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chess::move_gen::Move&gt;&gt; (127 samples, 0.58%)</title><rect x="83.3067%" y="213" width="0.5800%" height="15" fill="rgb(231,56,7)" fg:x="18240" fg:w="127"/><text x="83.5567%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (127 samples, 0.58%)</title><rect x="83.3067%" y="197" width="0.5800%" height="15" fill="rgb(244,186,29)" fg:x="18240" fg:w="127"/><text x="83.5567%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (7 samples, 0.03%)</title><rect x="83.8548%" y="181" width="0.0320%" height="15" fill="rgb(234,111,31)" fg:x="18360" fg:w="7"/><text x="84.1048%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::array (5 samples, 0.02%)</title><rect x="83.8639%" y="165" width="0.0228%" height="15" fill="rgb(241,149,10)" fg:x="18362" fg:w="5"/><text x="84.1139%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (5 samples, 0.02%)</title><rect x="83.8639%" y="149" width="0.0228%" height="15" fill="rgb(249,206,44)" fg:x="18362" fg:w="5"/><text x="84.1139%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (5 samples, 0.02%)</title><rect x="83.8639%" y="133" width="0.0228%" height="15" fill="rgb(251,153,30)" fg:x="18362" fg:w="5"/><text x="84.1139%" y="143.50"></text></g><g><title>chess::move_gen::move_gen (3,461 samples, 15.81%)</title><rect x="68.0840%" y="245" width="15.8073%" height="15" fill="rgb(239,152,38)" fg:x="14907" fg:w="3461"/><text x="68.3340%" y="255.50">chess::move_gen::move_gen</text></g><g><title>chess::perft::perft (1,194 samples, 5.45%)</title><rect x="83.8913%" y="245" width="5.4533%" height="15" fill="rgb(249,139,47)" fg:x="18368" fg:w="1194"/><text x="84.1413%" y="255.50">chess::..</text></g><g><title>[libc.so.6] (1,108 samples, 5.06%)</title><rect x="84.2841%" y="229" width="5.0605%" height="15" fill="rgb(244,64,35)" fg:x="18454" fg:w="1108"/><text x="84.5341%" y="239.50">[libc...</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.02%)</title><rect x="91.5460%" y="229" width="0.0228%" height="15" fill="rgb(216,46,15)" fg:x="20044" fg:w="5"/><text x="91.7960%" y="239.50"></text></g><g><title>[libc.so.6] (925 samples, 4.22%)</title><rect x="91.5689%" y="229" width="4.2247%" height="15" fill="rgb(250,74,19)" fg:x="20049" fg:w="925"/><text x="91.8189%" y="239.50">[libc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (53 samples, 0.24%)</title><rect x="95.7936%" y="229" width="0.2421%" height="15" fill="rgb(249,42,33)" fg:x="20974" fg:w="53"/><text x="96.0436%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (14 samples, 0.06%)</title><rect x="97.4286%" y="213" width="0.0639%" height="15" fill="rgb(242,149,17)" fg:x="21332" fg:w="14"/><text x="97.6786%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (14 samples, 0.06%)</title><rect x="97.4286%" y="197" width="0.0639%" height="15" fill="rgb(244,29,21)" fg:x="21332" fg:w="14"/><text x="97.6786%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (14 samples, 0.06%)</title><rect x="97.4286%" y="181" width="0.0639%" height="15" fill="rgb(220,130,37)" fg:x="21332" fg:w="14"/><text x="97.6786%" y="191.50"></text></g><g><title>chess::piece::PieceList::make_move (375 samples, 1.71%)</title><rect x="96.0448%" y="229" width="1.7127%" height="15" fill="rgb(211,67,2)" fg:x="21029" fg:w="375"/><text x="96.2948%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 0.26%)</title><rect x="97.4926%" y="213" width="0.2649%" height="15" fill="rgb(235,68,52)" fg:x="21346" fg:w="58"/><text x="97.7426%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 0.26%)</title><rect x="97.4926%" y="197" width="0.2649%" height="15" fill="rgb(246,142,3)" fg:x="21346" fg:w="58"/><text x="97.7426%" y="207.50"></text></g><g><title>chess::unmake::unmake_move (1,872 samples, 8.55%)</title><rect x="89.3446%" y="245" width="8.5499%" height="15" fill="rgb(241,25,7)" fg:x="19562" fg:w="1872"/><text x="89.5946%" y="255.50">chess::unmak..</text></g><g><title>core::slice::&lt;impl [T]&gt;::last (28 samples, 0.13%)</title><rect x="97.7666%" y="229" width="0.1279%" height="15" fill="rgb(242,119,39)" fg:x="21406" fg:w="28"/><text x="98.0166%" y="239.50"></text></g><g><title>__rust_dealloc (3 samples, 0.01%)</title><rect x="97.8945%" y="117" width="0.0137%" height="15" fill="rgb(241,98,45)" fg:x="21434" fg:w="3"/><text x="98.1445%" y="127.50"></text></g><g><title>chess::perft::perft (19,292 samples, 88.11%)</title><rect x="9.9155%" y="261" width="88.1114%" height="15" fill="rgb(254,28,30)" fg:x="2171" fg:w="19292"/><text x="10.1655%" y="271.50">chess::perft::perft</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chess::move_gen::Move&gt;&gt; (29 samples, 0.13%)</title><rect x="97.8945%" y="245" width="0.1325%" height="15" fill="rgb(241,142,54)" fg:x="21434" fg:w="29"/><text x="98.1445%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.13%)</title><rect x="97.8945%" y="229" width="0.1325%" height="15" fill="rgb(222,85,15)" fg:x="21434" fg:w="29"/><text x="98.1445%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chess::move_gen::Move,alloc::alloc::Global&gt;&gt; (29 samples, 0.13%)</title><rect x="97.8945%" y="213" width="0.1325%" height="15" fill="rgb(210,85,47)" fg:x="21434" fg:w="29"/><text x="98.1445%" y="223.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.13%)</title><rect x="97.8945%" y="197" width="0.1325%" height="15" fill="rgb(224,206,25)" fg:x="21434" fg:w="29"/><text x="98.1445%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chess::move_gen::Move&gt;&gt; (29 samples, 0.13%)</title><rect x="97.8945%" y="181" width="0.1325%" height="15" fill="rgb(243,201,19)" fg:x="21434" fg:w="29"/><text x="98.1445%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.13%)</title><rect x="97.8945%" y="165" width="0.1325%" height="15" fill="rgb(236,59,4)" fg:x="21434" fg:w="29"/><text x="98.1445%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (29 samples, 0.13%)</title><rect x="97.8945%" y="149" width="0.1325%" height="15" fill="rgb(254,179,45)" fg:x="21434" fg:w="29"/><text x="98.1445%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (29 samples, 0.13%)</title><rect x="97.8945%" y="133" width="0.1325%" height="15" fill="rgb(226,14,10)" fg:x="21434" fg:w="29"/><text x="98.1445%" y="143.50"></text></g><g><title>free (26 samples, 0.12%)</title><rect x="97.9082%" y="117" width="0.1187%" height="15" fill="rgb(244,27,41)" fg:x="21437" fg:w="26"/><text x="98.1582%" y="127.50"></text></g><g><title>[libc.so.6] (21 samples, 0.10%)</title><rect x="97.9310%" y="101" width="0.0959%" height="15" fill="rgb(235,35,32)" fg:x="21442" fg:w="21"/><text x="98.1810%" y="111.50"></text></g><g><title>[libc.so.6] (36 samples, 0.16%)</title><rect x="98.1320%" y="245" width="0.1644%" height="15" fill="rgb(218,68,31)" fg:x="21486" fg:w="36"/><text x="98.3820%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3 samples, 0.01%)</title><rect x="98.3832%" y="229" width="0.0137%" height="15" fill="rgb(207,120,37)" fg:x="21541" fg:w="3"/><text x="98.6332%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3 samples, 0.01%)</title><rect x="98.3832%" y="213" width="0.0137%" height="15" fill="rgb(227,98,0)" fg:x="21541" fg:w="3"/><text x="98.6332%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (3 samples, 0.01%)</title><rect x="98.3832%" y="197" width="0.0137%" height="15" fill="rgb(207,7,3)" fg:x="21541" fg:w="3"/><text x="98.6332%" y="207.50"></text></g><g><title>chess::piece::PieceList::make_move (21 samples, 0.10%)</title><rect x="98.3101%" y="245" width="0.0959%" height="15" fill="rgb(206,98,19)" fg:x="21525" fg:w="21"/><text x="98.5601%" y="255.50"></text></g><g><title>chess::unmake::unmake_move (85 samples, 0.39%)</title><rect x="98.0269%" y="261" width="0.3882%" height="15" fill="rgb(217,5,26)" fg:x="21463" fg:w="85"/><text x="98.2769%" y="271.50"></text></g><g><title>chess::perft::perft (20,136 samples, 91.97%)</title><rect x="6.4627%" y="277" width="91.9662%" height="15" fill="rgb(235,190,38)" fg:x="1415" fg:w="20136"/><text x="6.7127%" y="287.50">chess::perft::perft</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chess::move_gen::Move&gt;&gt; (3 samples, 0.01%)</title><rect x="98.4152%" y="261" width="0.0137%" height="15" fill="rgb(247,86,24)" fg:x="21548" fg:w="3"/><text x="98.6652%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="98.4152%" y="245" width="0.0137%" height="15" fill="rgb(205,101,16)" fg:x="21548" fg:w="3"/><text x="98.6652%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chess::move_gen::Move,alloc::alloc::Global&gt;&gt; (3 samples, 0.01%)</title><rect x="98.4152%" y="229" width="0.0137%" height="15" fill="rgb(246,168,33)" fg:x="21548" fg:w="3"/><text x="98.6652%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="98.4152%" y="213" width="0.0137%" height="15" fill="rgb(231,114,1)" fg:x="21548" fg:w="3"/><text x="98.6652%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chess::move_gen::Move&gt;&gt; (3 samples, 0.01%)</title><rect x="98.4152%" y="197" width="0.0137%" height="15" fill="rgb(207,184,53)" fg:x="21548" fg:w="3"/><text x="98.6652%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="98.4152%" y="181" width="0.0137%" height="15" fill="rgb(224,95,51)" fg:x="21548" fg:w="3"/><text x="98.6652%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.01%)</title><rect x="98.4152%" y="165" width="0.0137%" height="15" fill="rgb(212,188,45)" fg:x="21548" fg:w="3"/><text x="98.6652%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.01%)</title><rect x="98.4152%" y="149" width="0.0137%" height="15" fill="rgb(223,154,38)" fg:x="21548" fg:w="3"/><text x="98.6652%" y="159.50"></text></g><g><title>free (3 samples, 0.01%)</title><rect x="98.4152%" y="133" width="0.0137%" height="15" fill="rgb(251,22,52)" fg:x="21548" fg:w="3"/><text x="98.6652%" y="143.50"></text></g><g><title>[libc.so.6] (3 samples, 0.01%)</title><rect x="98.4152%" y="117" width="0.0137%" height="15" fill="rgb(229,209,22)" fg:x="21548" fg:w="3"/><text x="98.6652%" y="127.50"></text></g><g><title>_start (20,179 samples, 92.16%)</title><rect x="6.3165%" y="613" width="92.1626%" height="15" fill="rgb(234,138,34)" fg:x="1383" fg:w="20179"/><text x="6.5665%" y="623.50">_start</text></g><g><title>__libc_start_main (20,179 samples, 92.16%)</title><rect x="6.3165%" y="597" width="92.1626%" height="15" fill="rgb(212,95,11)" fg:x="1383" fg:w="20179"/><text x="6.5665%" y="607.50">__libc_start_main</text></g><g><title>[libc.so.6] (20,179 samples, 92.16%)</title><rect x="6.3165%" y="581" width="92.1626%" height="15" fill="rgb(240,179,47)" fg:x="1383" fg:w="20179"/><text x="6.5665%" y="591.50">[libc.so.6]</text></g><g><title>main (20,179 samples, 92.16%)</title><rect x="6.3165%" y="565" width="92.1626%" height="15" fill="rgb(240,163,11)" fg:x="1383" fg:w="20179"/><text x="6.5665%" y="575.50">main</text></g><g><title>std::rt::lang_start_internal (20,179 samples, 92.16%)</title><rect x="6.3165%" y="549" width="92.1626%" height="15" fill="rgb(236,37,12)" fg:x="1383" fg:w="20179"/><text x="6.5665%" y="559.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (20,179 samples, 92.16%)</title><rect x="6.3165%" y="533" width="92.1626%" height="15" fill="rgb(232,164,16)" fg:x="1383" fg:w="20179"/><text x="6.5665%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (20,179 samples, 92.16%)</title><rect x="6.3165%" y="517" width="92.1626%" height="15" fill="rgb(244,205,15)" fg:x="1383" fg:w="20179"/><text x="6.5665%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (20,179 samples, 92.16%)</title><rect x="6.3165%" y="501" width="92.1626%" height="15" fill="rgb(223,117,47)" fg:x="1383" fg:w="20179"/><text x="6.5665%" y="511.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (20,179 samples, 92.16%)</title><rect x="6.3165%" y="485" width="92.1626%" height="15" fill="rgb(244,107,35)" fg:x="1383" fg:w="20179"/><text x="6.5665%" y="495.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (20,179 samples, 92.16%)</title><rect x="6.3165%" y="469" width="92.1626%" height="15" fill="rgb(205,140,8)" fg:x="1383" fg:w="20179"/><text x="6.5665%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (20,179 samples, 92.16%)</title><rect x="6.3165%" y="453" width="92.1626%" height="15" fill="rgb(228,84,46)" fg:x="1383" fg:w="20179"/><text x="6.5665%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (20,179 samples, 92.16%)</title><rect x="6.3165%" y="437" width="92.1626%" height="15" fill="rgb(254,188,9)" fg:x="1383" fg:w="20179"/><text x="6.5665%" y="447.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (20,179 samples, 92.16%)</title><rect x="6.3165%" y="421" width="92.1626%" height="15" fill="rgb(206,112,54)" fg:x="1383" fg:w="20179"/><text x="6.5665%" y="431.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (20,179 samples, 92.16%)</title><rect x="6.3165%" y="405" width="92.1626%" height="15" fill="rgb(216,84,49)" fg:x="1383" fg:w="20179"/><text x="6.5665%" y="415.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (20,179 samples, 92.16%)</title><rect x="6.3165%" y="389" width="92.1626%" height="15" fill="rgb(214,194,35)" fg:x="1383" fg:w="20179"/><text x="6.5665%" y="399.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (20,179 samples, 92.16%)</title><rect x="6.3165%" y="373" width="92.1626%" height="15" fill="rgb(249,28,3)" fg:x="1383" fg:w="20179"/><text x="6.5665%" y="383.50">core::ops::function::FnOnce::call_once</text></g><g><title>prueba::main (20,179 samples, 92.16%)</title><rect x="6.3165%" y="357" width="92.1626%" height="15" fill="rgb(222,56,52)" fg:x="1383" fg:w="20179"/><text x="6.5665%" y="367.50">prueba::main</text></g><g><title>chess::perft::perft (20,179 samples, 92.16%)</title><rect x="6.3165%" y="341" width="92.1626%" height="15" fill="rgb(245,217,50)" fg:x="1383" fg:w="20179"/><text x="6.5665%" y="351.50">chess::perft::perft</text></g><g><title>chess::perft::perft (20,179 samples, 92.16%)</title><rect x="6.3165%" y="325" width="92.1626%" height="15" fill="rgb(213,201,24)" fg:x="1383" fg:w="20179"/><text x="6.5665%" y="335.50">chess::perft::perft</text></g><g><title>chess::perft::perft (20,179 samples, 92.16%)</title><rect x="6.3165%" y="309" width="92.1626%" height="15" fill="rgb(248,116,28)" fg:x="1383" fg:w="20179"/><text x="6.5665%" y="319.50">chess::perft::perft</text></g><g><title>chess::perft::perft (20,178 samples, 92.16%)</title><rect x="6.3211%" y="293" width="92.1580%" height="15" fill="rgb(219,72,43)" fg:x="1384" fg:w="20178"/><text x="6.5711%" y="303.50">chess::perft::perft</text></g><g><title>chess::unmake::unmake_move (11 samples, 0.05%)</title><rect x="98.4289%" y="277" width="0.0502%" height="15" fill="rgb(209,138,14)" fg:x="21551" fg:w="11"/><text x="98.6789%" y="287.50"></text></g><g><title>chess::piece::PieceList::make_move (4 samples, 0.02%)</title><rect x="98.4608%" y="261" width="0.0183%" height="15" fill="rgb(222,18,33)" fg:x="21558" fg:w="4"/><text x="98.7108%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.02%)</title><rect x="98.4791%" y="613" width="0.0228%" height="15" fill="rgb(213,199,7)" fg:x="21562" fg:w="5"/><text x="98.7291%" y="623.50"></text></g><g><title>chess::make_move::aux (7 samples, 0.03%)</title><rect x="98.5019%" y="613" width="0.0320%" height="15" fill="rgb(250,110,10)" fg:x="21567" fg:w="7"/><text x="98.7519%" y="623.50"></text></g><g><title>chess::make_move::make_move (84 samples, 0.38%)</title><rect x="98.5339%" y="613" width="0.3836%" height="15" fill="rgb(248,123,6)" fg:x="21574" fg:w="84"/><text x="98.7839%" y="623.50"></text></g><g><title>chess::move_gen::direction_sliding (7 samples, 0.03%)</title><rect x="98.9176%" y="613" width="0.0320%" height="15" fill="rgb(206,91,31)" fg:x="21658" fg:w="7"/><text x="99.1676%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.01%)</title><rect x="98.9358%" y="597" width="0.0137%" height="15" fill="rgb(211,154,13)" fg:x="21662" fg:w="3"/><text x="99.1858%" y="607.50"></text></g><g><title>chess::perft::perft (92 samples, 0.42%)</title><rect x="98.9769%" y="613" width="0.4202%" height="15" fill="rgb(225,148,7)" fg:x="21671" fg:w="92"/><text x="99.2269%" y="623.50"></text></g><g><title>chess::unmake::unmake_move (103 samples, 0.47%)</title><rect x="99.4108%" y="613" width="0.4704%" height="15" fill="rgb(220,160,43)" fg:x="21766" fg:w="103"/><text x="99.6608%" y="623.50"></text></g><g><title>malloc (9 samples, 0.04%)</title><rect x="99.8904%" y="613" width="0.0411%" height="15" fill="rgb(213,52,39)" fg:x="21871" fg:w="9"/><text x="100.1404%" y="623.50"></text></g><g><title>all (21,895 samples, 100%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(243,137,7)" fg:x="0" fg:w="21895"/><text x="0.2500%" y="655.50"></text></g><g><title>prueba (21,895 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(230,79,13)" fg:x="0" fg:w="21895"/><text x="0.2500%" y="639.50">prueba</text></g><g><title>realloc (15 samples, 0.07%)</title><rect x="99.9315%" y="613" width="0.0685%" height="15" fill="rgb(247,105,23)" fg:x="21880" fg:w="15"/><text x="100.1815%" y="623.50"></text></g></svg></svg>